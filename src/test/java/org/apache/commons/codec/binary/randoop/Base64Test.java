package org.apache.commons.codec.binary.randoop;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class Base64Test {

    public static boolean debug = false;

    @Test
    public void testBase64() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        byte[] byteArray3 = new byte[] { (byte) 0, (byte) 100 };
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_6 = new org.apache.commons.codec.binary.randoop.Base64(0, byteArray3, true, codecPolicy5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: codecPolicy");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 100]");
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        byte[] byteArray1 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        org.apache.commons.codec.CodecPolicy codecPolicy3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_4 = new org.apache.commons.codec.binary.randoop.Base64((int) 'a', byteArray1, true, codecPolicy3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: codecPolicy");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[13, 10]");
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        boolean boolean1 = org.apache.commons.codec.binary.randoop.Base64.isBase64((byte) 1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(100, byteArray6, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [/woK]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        int int0 = org.apache.commons.codec.binary.randoop.BaseNCodec.MIME_CHUNK_SIZE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 76 + "'", int0 == 76);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        byte[] byteArray1 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("hi!");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-122]");
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray1);
        org.apache.commons.codec.CodecPolicy codecPolicy4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_5 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 0, byteArray1, true, codecPolicy4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: codecPolicy");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        java.math.BigInteger bigInteger0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray1 = org.apache.commons.codec.binary.randoop.Base64.encodeInteger(bigInteger0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: bigInteger");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        boolean boolean1 = org.apache.commons.codec.binary.randoop.Base64.isBase64((byte) 100);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        int int0 = org.apache.commons.codec.binary.randoop.BaseNCodec.PEM_CHUNK_SIZE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 64 + "'", int0 == 64);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        boolean boolean1 = org.apache.commons.codec.binary.randoop.Base64.isBase64("");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray0);
        byte[] byteArray5 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray0, false, true, (int) (short) -1);
        boolean boolean6 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray0);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray15, false, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_21 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [/woK]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[76, 51, 100, 118, 83, 119]");
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        boolean boolean1 = org.apache.commons.codec.binary.randoop.Base64.isBase64("L3dvSw");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray5 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray3, false);
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray5);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray10 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false, false, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (8) than the specified maximum size of 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_18 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray17);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray22, false);
        boolean boolean26 = base64_18.isInAlphabet(byteArray24, true);
        byte[] byteArray29 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray24, false, true);
        byte[] byteArray30 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray24);
        java.lang.String str31 = base64_9.encodeAsString(byteArray24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_33 = new org.apache.commons.codec.binary.randoop.Base64(76, byteArray24, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [/woK]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str31, "L3dvSw==\001\n\n\ufffd\ufffd\n");
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str13 = base64_0.encodeToString(byteArray11);
        boolean boolean14 = base64_0.isStrictDecoding();
        java.lang.Class<?> wildcardClass15 = base64_0.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DQo" + "'", str12, "DQo");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo=" + "'", str13, "DQo=");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        java.lang.String str9 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray7);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AQoK//8K" + "'", str9, "AQoK//8K");
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str13 = base64_0.encodeToString(byteArray11);
        org.apache.commons.codec.binary.randoop.Base64 base64_14 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray18, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray20);
        java.lang.String str22 = base64_14.encodeToString(byteArray21);
        byte[] byteArray23 = base64_0.decode(byteArray21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj25 = base64_0.decode((java.lang.Object) 1.0f);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DQo" + "'", str12, "DQo");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo=" + "'", str13, "DQo=");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "/woK" + "'", str22, "/woK");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = new org.apache.commons.codec.binary.randoop.Base64.Builder();
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray15, false, true);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray15);
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray15, true, false);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_27 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) 1, byteArray24, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [L3dvSw==??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger25);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        boolean boolean1 = org.apache.commons.codec.binary.randoop.Base64.isBase64((byte) 0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        boolean boolean1 = org.apache.commons.codec.binary.randoop.Base64.isBase64((byte) 10);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray1);
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray1, false, true, (int) (short) -1);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray1);
        org.apache.commons.codec.CodecPolicy codecPolicy9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_10 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 100, byteArray1, false, codecPolicy9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: codecPolicy");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, false, true);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray14);
        boolean boolean21 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray14);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_13 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray17, false);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray19);
        java.lang.String str21 = base64_13.encodeToString(byteArray20);
        byte[] byteArray22 = base64_8.encode(byteArray20);
        java.lang.String str23 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray20);
        java.lang.String str24 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray20);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/woK" + "'", str21, "/woK");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "_woK" + "'", str23, "_woK");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "_woK" + "'", str24, "_woK");
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        boolean boolean1 = org.apache.commons.codec.binary.randoop.Base64.isBase64("DQo");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        boolean boolean1 = org.apache.commons.codec.binary.randoop.Base64.isBase64("hi!");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray6);
        org.apache.commons.codec.CodecPolicy codecPolicy10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_11 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) 1, byteArray6, false, codecPolicy10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: codecPolicy");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "L3dvSw" + "'", str8, "L3dvSw");
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj2 = base64_0.decode((java.lang.Object) (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray15, false, true);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray15);
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray15, true, false);
        org.apache.commons.codec.CodecPolicy codecPolicy26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_27 = new org.apache.commons.codec.binary.randoop.Base64(1, byteArray24, false, codecPolicy26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: codecPolicy");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        byte[] byteArray0 = null;
        java.lang.String str1 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray0);
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("DQo");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj20 = base64_8.encode((java.lang.Object) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[13, 10]");
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        byte[] byteArray0 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray1 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray0);
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray0);
        java.lang.String str3 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray0);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[68, 81, 111]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "DQo" + "'", str3, "DQo");
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder1 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy2 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder3 = builder1.setDecodingPolicy(codecPolicy2);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder5 = builder3.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy6 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder7 = builder3.setDecodingPolicy(codecPolicy6);
        byte[] byteArray11 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray13 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray11, false);
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray13);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder15 = builder7.setEncodeTable(byteArray13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_16 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [/woK]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, false, true);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray14);
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, true, false);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, true, true, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (10) than the specified maximum size of 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.randoop.Base64 base64_7 = builder2.get();
        org.apache.commons.codec.binary.randoop.Base64.Builder builder9 = builder2.setUrlSafe(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray5 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray3, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray3, true, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray3);
        byte[] byteArray10 = org.apache.commons.codec.binary.randoop.Base64.encodeInteger(bigInteger9);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.Base64.encodeInteger(bigInteger9);
        java.lang.String str12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray11);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 75, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder6.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder6.setLineLength(10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray5 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray3, false);
        java.lang.Class<?> wildcardClass6 = byteArray3.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray10 = null;
        byte[] byteArray13 = base64_9.encode(byteArray10, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_14 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray18, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray20);
        java.lang.String str22 = base64_14.encodeToString(byteArray21);
        byte[] byteArray23 = base64_9.encode(byteArray21);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_25 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 1, byteArray23, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [/woK??????]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "/woK" + "'", str22, "/woK");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64((int) '4');
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str13 = base64_0.encodeToString(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray18 = base64_0.encode(byteArray15, 1, 0);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray18, false, true);
        boolean boolean22 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray18);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DQo" + "'", str12, "DQo");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo=" + "'", str13, "DQo=");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger1 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"magnitude\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray19 = base64_9.decode("DQo");
        org.apache.commons.codec.binary.randoop.Base64 base64_20 = new org.apache.commons.codec.binary.randoop.Base64((-1), byteArray19);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray24, false);
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray26);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray30 = base64_20.encode(byteArray26, (int) (short) 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 10, 10]");
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64(0);
        boolean boolean3 = base64_1.isInAlphabet("AQoK//8K");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 100);
        org.apache.commons.codec.binary.randoop.Base64 base64_2 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray6, false);
        byte[] byteArray9 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray8);
        java.lang.String str10 = base64_2.encodeToString(byteArray9);
        boolean boolean11 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray14 = base64_1.encode(byteArray9, (int) (byte) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        boolean boolean1 = org.apache.commons.codec.binary.randoop.Base64.isBase64("UkZGdkRRbz0=");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray5 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray3, false);
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray6);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75, 13, 10]");
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        boolean boolean1 = org.apache.commons.codec.binary.randoop.Base64.isBase64("AQoK//8K\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray19 = base64_8.decode(byteArray18);
        org.apache.commons.codec.binary.randoop.Base64 base64_20 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_21 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray25, false);
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray27);
        java.lang.String str29 = base64_21.encodeToString(byteArray28);
        java.lang.String str30 = base64_20.encodeAsString(byteArray28);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_39 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray38);
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray45 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray43, false);
        boolean boolean47 = base64_39.isInAlphabet(byteArray45, true);
        byte[] byteArray50 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray45, false, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray45);
        byte[] byteArray54 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray45, true, false);
        java.math.BigInteger bigInteger55 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray54);
        byte[] byteArray56 = base64_20.encode(byteArray54);
        java.lang.Object obj57 = base64_8.encode((java.lang.Object) byteArray56);
        byte[] byteArray61 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray63 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray61, false);
        byte[] byteArray64 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray63);
        byte[] byteArray65 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray63);
        java.lang.String str66 = base64_8.encodeAsString(byteArray63);
        java.lang.Class<?> wildcardClass67 = byteArray63.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "/woK" + "'", str29, "/woK");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/woK" + "'", str30, "/woK");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str66, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64(76);
        org.apache.commons.codec.binary.randoop.Base64 base64_2 = new org.apache.commons.codec.binary.randoop.Base64();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = base64_1.encode((java.lang.Object) base64_2);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_17 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray16);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray21, false);
        boolean boolean25 = base64_17.isInAlphabet(byteArray23, true);
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray23, false, true);
        byte[] byteArray29 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray23);
        java.lang.String str30 = base64_8.encodeAsString(byteArray23);
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray23);
        byte[] byteArray35 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray31, true, true, (int) ' ');
        boolean boolean36 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray35);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str30, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = base64_0.encodeToString(byteArray7);
        byte[] byteArray10 = base64_0.decode("");
        boolean boolean11 = base64_0.isStrictDecoding();
        byte[] byteArray12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = base64_0.getEncodedLength(byteArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"pArray\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("");
        org.apache.commons.codec.binary.randoop.Base64 base64_4 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 10, byteArray2, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj6 = base64_4.encode((java.lang.Object) 100.0d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        byte[] byteArray1 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[76, 51, 100, 118, 83, 119, 61, 61]");
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64(false);
        java.lang.Object obj2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = base64_1.encode(obj2);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray5 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray3, false);
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray5);
        boolean boolean7 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray6);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        org.apache.commons.codec.binary.randoop.Base64 base64_12 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = base64_0.decode((java.lang.Object) base64_12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray5 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray3, false);
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5);
        boolean boolean8 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray7);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.Base64.encodeInteger(bigInteger10);
        java.lang.Class<?> wildcardClass12 = bigInteger10.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 61]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray5 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray3, false);
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray5);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "L3dvSw" + "'", str7, "L3dvSw");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "L3dvSw==" + "'", str8, "L3dvSw==");
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        byte[] byteArray0 = null;
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray0, true);
        org.junit.Assert.assertNull(byteArray2);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray15, false, true);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray15);
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray15, true, false);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray24, false, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_30 = new org.apache.commons.codec.binary.randoop.Base64(100, byteArray24, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [L3dvSw==??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103]");
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64(0);
        boolean boolean2 = base64_1.isStrictDecoding();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str13 = base64_0.encodeToString(byteArray11);
        boolean boolean14 = base64_0.isStrictDecoding();
        byte[] byteArray16 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("");
        byte[] byteArray19 = base64_0.encode(byteArray16, (int) 'a', (int) (byte) 100);
        org.apache.commons.codec.binary.randoop.Base64 base64_20 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_21 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray25, false);
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray27);
        java.lang.String str29 = base64_21.encodeToString(byteArray28);
        java.lang.String str30 = base64_20.encodeAsString(byteArray28);
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str32 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray31);
        java.lang.String str33 = base64_20.encodeToString(byteArray31);
        boolean boolean34 = base64_20.isStrictDecoding();
        byte[] byteArray36 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("");
        byte[] byteArray39 = base64_20.encode(byteArray36, (int) 'a', (int) (byte) 100);
        java.math.BigInteger bigInteger40 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray39);
        byte[] byteArray41 = org.apache.commons.codec.binary.randoop.Base64.encodeInteger(bigInteger40);
        long long42 = base64_0.getEncodedLength(byteArray41);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DQo" + "'", str12, "DQo");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo=" + "'", str13, "DQo=");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "/woK" + "'", str29, "/woK");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/woK" + "'", str30, "/woK");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "DQo" + "'", str32, "DQo");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "DQo=" + "'", str33, "DQo=");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setLineLength(0);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder4.setPadding((byte) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, false, true);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray14);
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, true, false);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray23, true, true, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (18) than the specified maximum size of 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        byte[] byteArray4 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, true, true, (int) '#');
        org.apache.commons.codec.binary.randoop.Base64.Builder builder9 = builder2.setLineSeparator(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str11 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray10);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder13 = builder2.setEncodeTable(byteArray10);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder15 = builder2.setPadding((byte) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DQo" + "'", str11, "DQo");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_2 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray6, false);
        byte[] byteArray9 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray8);
        java.lang.String str10 = base64_2.encodeToString(byteArray9);
        java.lang.String str11 = base64_1.encodeAsString(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str13 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str14 = base64_1.encodeToString(byteArray12);
        boolean boolean15 = base64_1.isStrictDecoding();
        byte[] byteArray17 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("");
        byte[] byteArray20 = base64_1.encode(byteArray17, (int) 'a', (int) (byte) 100);
        org.apache.commons.codec.binary.randoop.Base64 base64_22 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) 10, byteArray20, true);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_31 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray30);
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray37 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray35, false);
        boolean boolean39 = base64_31.isInAlphabet(byteArray37, true);
        byte[] byteArray41 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray42 = base64_31.decode(byteArray41);
        org.apache.commons.codec.binary.randoop.Base64 base64_43 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_44 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray48 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray50 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray48, false);
        byte[] byteArray51 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray50);
        java.lang.String str52 = base64_44.encodeToString(byteArray51);
        java.lang.String str53 = base64_43.encodeAsString(byteArray51);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_62 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray61);
        byte[] byteArray66 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray68 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray66, false);
        boolean boolean70 = base64_62.isInAlphabet(byteArray68, true);
        byte[] byteArray73 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray68, false, true);
        byte[] byteArray74 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray68);
        byte[] byteArray77 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray68, true, false);
        java.math.BigInteger bigInteger78 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray77);
        byte[] byteArray79 = base64_43.encode(byteArray77);
        java.lang.Object obj80 = base64_31.encode((java.lang.Object) byteArray79);
        java.math.BigInteger bigInteger81 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray79);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj82 = base64_22.encode((java.lang.Object) bigInteger81);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/woK" + "'", str11, "/woK");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo" + "'", str13, "DQo");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DQo=" + "'", str14, "DQo=");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "/woK" + "'", str52, "/woK");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "/woK" + "'", str53, "/woK");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertNotNull(bigInteger81);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray10, false);
        byte[] byteArray13 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray12);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder14 = builder6.setEncodeTable(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray12);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "L3dvSw==" + "'", str15, "L3dvSw==");
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("DQo");
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray19);
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray19, false, true, (int) (short) -1);
        byte[] byteArray25 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray19);
        byte[] byteArray26 = base64_8.decode(byteArray19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj28 = base64_8.decode((java.lang.Object) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        byte[] byteArray4 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, true, true, (int) '#');
        org.apache.commons.codec.binary.randoop.Base64.Builder builder9 = builder2.setLineSeparator(byteArray8);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder11 = builder2.setUrlSafe(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, true);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray22 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, true, true, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (10) than the specified maximum size of -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        byte[] byteArray0 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray1 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray0);
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray0);
        boolean boolean3 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray0);
        byte[] byteArray4 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray0);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[68, 81, 111, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 100);
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str3 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray2);
        byte[] byteArray5 = base64_1.encode(byteArray4);
        boolean boolean6 = base64_1.isStrictDecoding();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "DQo" + "'", str3, "DQo");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[82, 70, 70, 118, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, false, true);
        boolean boolean20 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray19);
        java.lang.Class<?> wildcardClass21 = byteArray19.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = base64_0.encodeToString(byteArray7);
        byte[] byteArray10 = base64_0.decode("");
        boolean boolean11 = base64_0.isStrictDecoding();
        org.apache.commons.codec.binary.randoop.Base64 base64_12 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray16, false);
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray18);
        java.lang.String str20 = base64_12.encodeToString(byteArray19);
        byte[] byteArray22 = base64_12.decode("");
        byte[] byteArray23 = base64_0.decode(byteArray22);
        byte[] byteArray24 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = base64_0.isInAlphabet(byteArray24, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"arrayOctet\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "/woK" + "'", str20, "/woK");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        boolean boolean1 = org.apache.commons.codec.binary.randoop.Base64.isBase64("/woK");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder2.setUrlSafe(true);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_17 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray16);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray21, false);
        boolean boolean25 = base64_17.isInAlphabet(byteArray23, true);
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray28 = base64_17.decode(byteArray27);
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray27, false, true);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder32 = builder2.setEncodeTable(byteArray27);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_42 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray41);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray48 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray46, false);
        boolean boolean50 = base64_42.isInAlphabet(byteArray48, true);
        byte[] byteArray52 = base64_42.decode("DQo");
        org.apache.commons.codec.binary.randoop.Base64 base64_53 = new org.apache.commons.codec.binary.randoop.Base64((-1), byteArray52);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder54 = builder2.setLineSeparator(byteArray52);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[65, 65, 111, 75, 67, 103, 111, 66]");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[13, 10]");
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        org.apache.commons.codec.binary.randoop.Base64.Builder builder7 = builder0.setLineSeparator(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_8 = builder0.get();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [DQo??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        boolean boolean1 = org.apache.commons.codec.binary.randoop.Base64.isBase64("L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray19 = base64_8.decode(byteArray18);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder20 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy21 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder22 = builder20.setDecodingPolicy(codecPolicy21);
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray24, true, true, (int) '#');
        org.apache.commons.codec.binary.randoop.Base64.Builder builder29 = builder22.setLineSeparator(byteArray28);
        java.lang.Object obj30 = base64_8.encode((java.lang.Object) byteArray28);
        org.apache.commons.codec.binary.randoop.Base64 base64_31 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray37 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray35, false);
        byte[] byteArray38 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray37);
        java.lang.String str39 = base64_31.encodeToString(byteArray38);
        byte[] byteArray41 = base64_31.decode("");
        boolean boolean42 = base64_31.isStrictDecoding();
        org.apache.commons.codec.binary.randoop.Base64 base64_43 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray47 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray49 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray47, false);
        byte[] byteArray50 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray49);
        java.lang.String str51 = base64_43.encodeToString(byteArray50);
        byte[] byteArray53 = base64_43.decode("");
        byte[] byteArray54 = base64_31.decode(byteArray53);
        byte[] byteArray57 = base64_8.encode(byteArray53, (int) '4', (int) ' ');
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "/woK" + "'", str39, "/woK");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "/woK" + "'", str51, "/woK");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray19 = base64_8.decode(byteArray18);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_28 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray27);
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_37 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray36);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray43 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray41, false);
        boolean boolean45 = base64_37.isInAlphabet(byteArray43, true);
        byte[] byteArray48 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray43, false, true);
        byte[] byteArray49 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray43);
        java.lang.String str50 = base64_28.encodeAsString(byteArray43);
        byte[] byteArray51 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray43);
        byte[] byteArray55 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray51, true, true, (int) ' ');
        java.lang.String str56 = base64_8.encodeToString(byteArray51);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder57 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy58 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder59 = builder57.setDecodingPolicy(codecPolicy58);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder61 = builder59.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy62 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder63 = builder59.setDecodingPolicy(codecPolicy62);
        org.apache.commons.codec.CodecPolicy codecPolicy64 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder65 = builder59.setDecodingPolicy(codecPolicy64);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder67 = builder65.setUrlSafe(false);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_76 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray75);
        byte[] byteArray77 = null;
        byte[] byteArray80 = base64_76.encode(byteArray77, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_81 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray85 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray87 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray85, false);
        byte[] byteArray88 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray87);
        java.lang.String str89 = base64_81.encodeToString(byteArray88);
        byte[] byteArray90 = base64_76.encode(byteArray88);
        java.lang.String str91 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray88);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder92 = builder65.setLineSeparator(byteArray88);
        java.lang.Object obj93 = base64_8.decode((java.lang.Object) byteArray88);
        org.apache.commons.codec.CodecPolicy codecPolicy94 = base64_8.getCodecPolicy();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str50, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 13, 10]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0NCg==\001\n\n\ufffd\ufffd\n" + "'", str56, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0NCg==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray80);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "/woK" + "'", str89, "/woK");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "_woK" + "'", str91, "_woK");
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(obj93);
        org.junit.Assert.assertTrue("'" + codecPolicy94 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy94.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_19 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray18);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray25 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray23, false);
        boolean boolean27 = base64_19.isInAlphabet(byteArray25, true);
        byte[] byteArray30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray25, false, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray25);
        byte[] byteArray34 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray25, true, false);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray34);
        byte[] byteArray36 = base64_0.encode(byteArray34);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder37 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy38 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder39 = builder37.setDecodingPolicy(codecPolicy38);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder41 = builder39.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder43 = builder39.setPadding((byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj44 = base64_0.encode((java.lang.Object) builder39);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray19 = base64_8.decode(byteArray18);
        boolean boolean21 = base64_8.isInAlphabet("");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder22 = org.apache.commons.codec.binary.randoop.Base64.builder();
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray24, true, true, (int) '#');
        org.apache.commons.codec.binary.randoop.Base64.Builder builder29 = builder22.setLineSeparator(byteArray28);
        java.lang.String str30 = base64_8.encodeToString(byteArray28);
        byte[] byteArray31 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = base64_8.isInAlphabet(byteArray31, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"arrayOctet\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "RFFvDQo=\001\n\n\ufffd\ufffd\n" + "'", str30, "RFFvDQo=\001\n\n\ufffd\ufffd\n");
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray19 = base64_9.decode("DQo");
        org.apache.commons.codec.binary.randoop.Base64 base64_20 = new org.apache.commons.codec.binary.randoop.Base64((-1), byteArray19);
        org.apache.commons.codec.binary.randoop.Base64 base64_21 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_22 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray26, false);
        byte[] byteArray29 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray28);
        java.lang.String str30 = base64_22.encodeToString(byteArray29);
        java.lang.String str31 = base64_21.encodeAsString(byteArray29);
        byte[] byteArray32 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str33 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray32);
        java.lang.String str34 = base64_21.encodeToString(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray39 = base64_21.encode(byteArray36, 1, 0);
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray45 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray43, false);
        long long46 = base64_21.getEncodedLength(byteArray45);
        java.lang.String str47 = base64_20.encodeToString(byteArray45);
        java.lang.Class<?> wildcardClass48 = byteArray45.getClass();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/woK" + "'", str30, "/woK");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "/woK" + "'", str31, "/woK");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "DQo" + "'", str33, "DQo");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "DQo=" + "'", str34, "DQo=");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 8L + "'", long46 == 8L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "L3dvSw==" + "'", str47, "L3dvSw==");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_13 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray17, false);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray19);
        java.lang.String str21 = base64_13.encodeToString(byteArray20);
        byte[] byteArray22 = base64_8.encode(byteArray20);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_31 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray30);
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray37 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray35, false);
        boolean boolean39 = base64_31.isInAlphabet(byteArray37, true);
        byte[] byteArray41 = base64_31.decode("/woK");
        byte[] byteArray42 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str43 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray42);
        byte[] byteArray44 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray42);
        boolean boolean46 = base64_31.isInAlphabet(byteArray44, true);
        byte[] byteArray47 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str48 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray47);
        java.lang.String str50 = base64_31.encodeAsString(byteArray49);
        boolean boolean52 = base64_8.isInAlphabet(byteArray49, true);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_62 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray61);
        byte[] byteArray66 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray68 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray66, false);
        boolean boolean70 = base64_62.isInAlphabet(byteArray68, true);
        byte[] byteArray72 = base64_62.decode("DQo");
        org.apache.commons.codec.binary.randoop.Base64 base64_73 = new org.apache.commons.codec.binary.randoop.Base64((-1), byteArray72);
        boolean boolean74 = base64_73.isUrlSafe();
        org.apache.commons.codec.binary.randoop.Base64 base64_75 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray77 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray81 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray77, true, true, (int) '#');
        long long82 = base64_75.getEncodedLength(byteArray77);
        boolean boolean83 = base64_75.isUrlSafe();
        byte[] byteArray85 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray89 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray85, true, true, (int) '#');
        byte[] byteArray90 = base64_75.encode(byteArray89);
        java.lang.String str91 = base64_73.encodeToString(byteArray90);
        byte[] byteArray92 = base64_8.decode(byteArray90);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/woK" + "'", str21, "/woK");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "DQo" + "'", str43, "DQo");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "DQo" + "'", str48, "DQo");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[68, 81, 111, 61]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RFFvPQ==\001\n\n\ufffd\ufffd\n" + "'", str50, "RFFvPQ==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[13, 10]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 4L + "'", long82 == 4L);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[82, 70, 70, 118, 68, 81, 111, 61]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "UkZGdkRRbz0=" + "'", str91, "UkZGdkRRbz0=");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[68, 81, 111, 13, 10]");
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_13 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray17, false);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray19);
        java.lang.String str21 = base64_13.encodeToString(byteArray20);
        byte[] byteArray22 = base64_8.encode(byteArray20);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_31 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray30);
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray37 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray35, false);
        boolean boolean39 = base64_31.isInAlphabet(byteArray37, true);
        byte[] byteArray41 = base64_31.decode("/woK");
        byte[] byteArray42 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str43 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray42);
        byte[] byteArray44 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray42);
        boolean boolean46 = base64_31.isInAlphabet(byteArray44, true);
        byte[] byteArray47 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str48 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray47);
        java.lang.String str50 = base64_31.encodeAsString(byteArray49);
        boolean boolean52 = base64_8.isInAlphabet(byteArray49, true);
        byte[] byteArray56 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray49, false, true, 100);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/woK" + "'", str21, "/woK");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "DQo" + "'", str43, "DQo");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "DQo" + "'", str48, "DQo");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[68, 81, 111, 61]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RFFvPQ==\001\n\n\ufffd\ufffd\n" + "'", str50, "RFFvPQ==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[82, 70, 70, 118, 80, 81]");
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder6.setDecodingPolicy(codecPolicy7);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder8.setPadding((byte) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        long long7 = base64_0.getEncodedLength(byteArray2);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_16 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray15);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray22 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray20, false);
        boolean boolean24 = base64_16.isInAlphabet(byteArray22, true);
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray22, true, false);
        byte[] byteArray28 = base64_0.encode(byteArray22);
        java.lang.Class<?> wildcardClass29 = byteArray28.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4L + "'", long7 == 4L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        boolean boolean11 = base64_0.isStrictDecoding();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_21 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray20);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray25, false);
        boolean boolean29 = base64_21.isInAlphabet(byteArray27, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray32 = base64_21.decode(byteArray31);
        org.apache.commons.codec.binary.randoop.Base64 base64_33 = new org.apache.commons.codec.binary.randoop.Base64((int) '4', byteArray31);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray36 = base64_0.encode(byteArray31, (int) (short) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 6 out of bounds for length 6");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_13 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_14 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray18, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray20);
        java.lang.String str22 = base64_14.encodeToString(byteArray21);
        java.lang.String str23 = base64_13.encodeAsString(byteArray21);
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str25 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray24);
        java.lang.String str26 = base64_13.encodeToString(byteArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray31 = base64_13.encode(byteArray28, 1, 0);
        byte[] byteArray34 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray31, false, true);
        byte[] byteArray35 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray31);
        java.lang.String str36 = base64_8.encodeToString(byteArray31);
        boolean boolean37 = base64_8.isStrictDecoding();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "/woK" + "'", str22, "/woK");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "/woK" + "'", str23, "/woK");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DQo" + "'", str25, "DQo");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DQo=" + "'", str26, "DQo=");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray19 = base64_9.decode("DQo");
        org.apache.commons.codec.binary.randoop.Base64 base64_20 = new org.apache.commons.codec.binary.randoop.Base64((-1), byteArray19);
        org.apache.commons.codec.binary.randoop.Base64 base64_21 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_22 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray26, false);
        byte[] byteArray29 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray28);
        java.lang.String str30 = base64_22.encodeToString(byteArray29);
        java.lang.String str31 = base64_21.encodeAsString(byteArray29);
        byte[] byteArray32 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str33 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray32);
        java.lang.String str34 = base64_21.encodeToString(byteArray32);
        byte[] byteArray37 = base64_20.encode(byteArray32, (int) (short) 100, 0);
        boolean boolean38 = base64_20.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/woK" + "'", str30, "/woK");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "/woK" + "'", str31, "/woK");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "DQo" + "'", str33, "DQo");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "DQo=" + "'", str34, "DQo=");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = base64_0.encodeToString(byteArray7);
        byte[] byteArray10 = base64_0.decode("");
        boolean boolean11 = base64_0.isStrictDecoding();
        org.apache.commons.codec.binary.randoop.Base64 base64_13 = new org.apache.commons.codec.binary.randoop.Base64(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj14 = base64_0.decode((java.lang.Object) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        boolean boolean13 = base64_8.isStrictDecoding();
        org.apache.commons.codec.binary.randoop.Base64 base64_14 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray16 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray16, true, true, (int) '#');
        long long21 = base64_14.getEncodedLength(byteArray16);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_30 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray29);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray36 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray34, false);
        boolean boolean38 = base64_30.isInAlphabet(byteArray36, true);
        byte[] byteArray41 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray36, true, false);
        byte[] byteArray42 = base64_14.encode(byteArray36);
        java.lang.String str43 = base64_8.encodeToString(byteArray42);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder44 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy45 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder46 = builder44.setDecodingPolicy(codecPolicy45);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder48 = builder46.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy49 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder50 = builder46.setDecodingPolicy(codecPolicy49);
        org.apache.commons.codec.CodecPolicy codecPolicy51 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder52 = builder46.setDecodingPolicy(codecPolicy51);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder54 = builder52.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64 base64_55 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_56 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray60 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray62 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray60, false);
        byte[] byteArray63 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray62);
        java.lang.String str64 = base64_56.encodeToString(byteArray63);
        java.lang.String str65 = base64_55.encodeAsString(byteArray63);
        byte[] byteArray66 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray67 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray66);
        byte[] byteArray68 = base64_55.decode(byteArray66);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder69 = builder52.setEncodeTable(byteArray66);
        boolean boolean71 = base64_8.isInAlphabet(byteArray66, false);
        java.lang.String str72 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray66);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4L + "'", long21 == 4L);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n" + "'", str43, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "/woK" + "'", str64, "/woK");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "/woK" + "'", str65, "/woK");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "DQo" + "'", str72, "DQo");
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder2.setDecodingPolicy(codecPolicy7);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder12 = builder2.setLineLength((int) (byte) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray10 = null;
        byte[] byteArray13 = base64_9.encode(byteArray10, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_14 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray18, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray20);
        java.lang.String str22 = base64_14.encodeToString(byteArray21);
        byte[] byteArray23 = base64_9.encode(byteArray21);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_32 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray31);
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray38 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray36, false);
        boolean boolean40 = base64_32.isInAlphabet(byteArray38, true);
        byte[] byteArray42 = base64_32.decode("/woK");
        byte[] byteArray43 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str44 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray43);
        byte[] byteArray45 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray43);
        boolean boolean47 = base64_32.isInAlphabet(byteArray45, true);
        byte[] byteArray48 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str49 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray48);
        byte[] byteArray50 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray48);
        java.lang.String str51 = base64_32.encodeAsString(byteArray50);
        boolean boolean53 = base64_9.isInAlphabet(byteArray50, true);
        byte[] byteArray55 = base64_9.decode("L3dvSw");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_56 = new org.apache.commons.codec.binary.randoop.Base64((-1), byteArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [/woK]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "/woK" + "'", str22, "/woK");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "DQo" + "'", str44, "DQo");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "DQo" + "'", str49, "DQo");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[68, 81, 111, 61]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "RFFvPQ==\001\n\n\ufffd\ufffd\n" + "'", str51, "RFFvPQ==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[47, 119, 111, 75]");
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64(64);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy3 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setDecodingPolicy(codecPolicy3);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder4.setPadding((byte) 1);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_15 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray14);
        byte[] byteArray16 = null;
        byte[] byteArray19 = base64_15.encode(byteArray16, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_20 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray24, false);
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray26);
        java.lang.String str28 = base64_20.encodeToString(byteArray27);
        byte[] byteArray29 = base64_15.encode(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray29);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder31 = builder6.setLineSeparator(byteArray30);
        byte[] byteArray32 = base64_1.decode(byteArray30);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "/woK" + "'", str28, "/woK");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray19 = base64_8.decode(byteArray18);
        org.apache.commons.codec.binary.randoop.Base64 base64_20 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_21 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray25, false);
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray27);
        java.lang.String str29 = base64_21.encodeToString(byteArray28);
        java.lang.String str30 = base64_20.encodeAsString(byteArray28);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_39 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray38);
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray45 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray43, false);
        boolean boolean47 = base64_39.isInAlphabet(byteArray45, true);
        byte[] byteArray50 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray45, false, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray45);
        byte[] byteArray54 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray45, true, false);
        java.math.BigInteger bigInteger55 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray54);
        byte[] byteArray56 = base64_20.encode(byteArray54);
        java.lang.Object obj57 = base64_8.encode((java.lang.Object) byteArray56);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_66 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray65);
        byte[] byteArray68 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray65, true);
        java.lang.String str69 = base64_8.encodeAsString(byteArray65);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_78 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray77);
        byte[] byteArray82 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray84 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray82, false);
        boolean boolean86 = base64_78.isInAlphabet(byteArray84, true);
        byte[] byteArray89 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray84, true, false);
        java.lang.String str90 = base64_8.encodeToString(byteArray89);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "/woK" + "'", str29, "/woK");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/woK" + "'", str30, "/woK");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[65, 81, 111, 75, 47, 47, 56, 75, 13, 10]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "AQoK//8K\001\n\n\ufffd\ufffd\n" + "'", str69, "AQoK//8K\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0NCg==\001\n\n\ufffd\ufffd\n" + "'", str90, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0NCg==\001\n\n\ufffd\ufffd\n");
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        boolean boolean13 = base64_8.isStrictDecoding();
        org.apache.commons.codec.binary.randoop.Base64 base64_14 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray16 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray16, true, true, (int) '#');
        long long21 = base64_14.getEncodedLength(byteArray16);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_30 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray29);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray36 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray34, false);
        boolean boolean38 = base64_30.isInAlphabet(byteArray36, true);
        byte[] byteArray41 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray36, true, false);
        byte[] byteArray42 = base64_14.encode(byteArray36);
        java.lang.String str43 = base64_8.encodeToString(byteArray42);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder44 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy45 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder46 = builder44.setDecodingPolicy(codecPolicy45);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder48 = builder46.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy49 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder50 = builder46.setDecodingPolicy(codecPolicy49);
        org.apache.commons.codec.CodecPolicy codecPolicy51 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder52 = builder46.setDecodingPolicy(codecPolicy51);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder54 = builder52.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64 base64_55 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_56 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray60 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray62 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray60, false);
        byte[] byteArray63 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray62);
        java.lang.String str64 = base64_56.encodeToString(byteArray63);
        java.lang.String str65 = base64_55.encodeAsString(byteArray63);
        byte[] byteArray66 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray67 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray66);
        byte[] byteArray68 = base64_55.decode(byteArray66);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder69 = builder52.setEncodeTable(byteArray66);
        boolean boolean71 = base64_8.isInAlphabet(byteArray66, false);
        org.apache.commons.codec.CodecPolicy codecPolicy72 = base64_8.getCodecPolicy();
        byte[] byteArray73 = null;
        byte[] byteArray74 = base64_8.decode(byteArray73);
        boolean boolean76 = base64_8.isInAlphabet("DQo");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4L + "'", long21 == 4L);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n" + "'", str43, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "/woK" + "'", str64, "/woK");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "/woK" + "'", str65, "/woK");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy72 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy72.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNull(byteArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str13 = base64_0.encodeToString(byteArray11);
        boolean boolean14 = base64_0.isStrictDecoding();
        byte[] byteArray16 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("");
        byte[] byteArray19 = base64_0.encode(byteArray16, (int) 'a', (int) (byte) 100);
        org.apache.commons.codec.CodecPolicy codecPolicy20 = base64_0.getCodecPolicy();
        org.apache.commons.codec.binary.randoop.Base64 base64_21 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_22 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray26, false);
        byte[] byteArray29 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray28);
        java.lang.String str30 = base64_22.encodeToString(byteArray29);
        java.lang.String str31 = base64_21.encodeAsString(byteArray29);
        byte[] byteArray32 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray33 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray32);
        byte[] byteArray34 = base64_21.decode(byteArray32);
        byte[] byteArray35 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray35);
        byte[] byteArray37 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray35);
        long long38 = base64_0.getEncodedLength(byteArray35);
        org.apache.commons.codec.binary.randoop.Base64 base64_39 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_40 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray46 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray44, false);
        byte[] byteArray47 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray46);
        java.lang.String str48 = base64_40.encodeToString(byteArray47);
        java.lang.String str49 = base64_39.encodeAsString(byteArray47);
        byte[] byteArray50 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str51 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray50);
        java.lang.String str52 = base64_39.encodeToString(byteArray50);
        byte[] byteArray54 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray57 = base64_39.encode(byteArray54, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj58 = base64_0.encode((java.lang.Object) base64_39);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DQo" + "'", str12, "DQo");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo=" + "'", str13, "DQo=");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + codecPolicy20 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy20.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/woK" + "'", str30, "/woK");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "/woK" + "'", str31, "/woK");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "/woK" + "'", str48, "/woK");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "/woK" + "'", str49, "/woK");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "DQo" + "'", str51, "DQo");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "DQo=" + "'", str52, "DQo=");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray0);
        java.lang.String str2 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray0);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = base64_0.encodeToString(byteArray7);
        byte[] byteArray10 = base64_0.decode("");
        boolean boolean12 = base64_0.isInAlphabet("AQoK//8K");
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_21 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray20);
        byte[] byteArray22 = null;
        byte[] byteArray25 = base64_21.encode(byteArray22, 100, 76);
        boolean boolean26 = base64_21.isStrictDecoding();
        org.apache.commons.codec.binary.randoop.Base64 base64_27 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray29 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray33 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray29, true, true, (int) '#');
        long long34 = base64_27.getEncodedLength(byteArray29);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_43 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray42);
        byte[] byteArray47 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray49 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray47, false);
        boolean boolean51 = base64_43.isInAlphabet(byteArray49, true);
        byte[] byteArray54 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray49, true, false);
        byte[] byteArray55 = base64_27.encode(byteArray49);
        java.lang.String str56 = base64_21.encodeToString(byteArray55);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder57 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy58 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder59 = builder57.setDecodingPolicy(codecPolicy58);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder61 = builder59.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy62 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder63 = builder59.setDecodingPolicy(codecPolicy62);
        org.apache.commons.codec.CodecPolicy codecPolicy64 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder65 = builder59.setDecodingPolicy(codecPolicy64);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder67 = builder65.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64 base64_68 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_69 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray73 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray75 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray73, false);
        byte[] byteArray76 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray75);
        java.lang.String str77 = base64_69.encodeToString(byteArray76);
        java.lang.String str78 = base64_68.encodeAsString(byteArray76);
        byte[] byteArray79 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray80 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray79);
        byte[] byteArray81 = base64_68.decode(byteArray79);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder82 = builder65.setEncodeTable(byteArray79);
        boolean boolean84 = base64_21.isInAlphabet(byteArray79, false);
        byte[] byteArray85 = base64_0.encode(byteArray79);
        byte[] byteArray87 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray79, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n" + "'", str56, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "/woK" + "'", str77, "/woK");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "/woK" + "'", str78, "/woK");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[68, 81, 111, 61]");
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("/woK");
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray19);
        boolean boolean23 = base64_8.isInAlphabet(byteArray21, true);
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray21, false, false, (int) ' ');
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray21);
        byte[] byteArray29 = org.apache.commons.codec.binary.randoop.Base64.encodeInteger(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DQo" + "'", str20, "DQo");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_13 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_14 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray18, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray20);
        java.lang.String str22 = base64_14.encodeToString(byteArray21);
        java.lang.String str23 = base64_13.encodeAsString(byteArray21);
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str25 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray24);
        java.lang.String str26 = base64_13.encodeToString(byteArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray31 = base64_13.encode(byteArray28, 1, 0);
        byte[] byteArray34 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray31, false, true);
        byte[] byteArray35 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray31);
        java.lang.String str36 = base64_8.encodeToString(byteArray31);
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray31);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "/woK" + "'", str22, "/woK");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "/woK" + "'", str23, "/woK");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DQo" + "'", str25, "DQo");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DQo=" + "'", str26, "DQo=");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(bigInteger37);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        byte[] byteArray1 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray4 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray1, false, true);
        java.math.BigInteger bigInteger5 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(bigInteger5);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_2 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray6, false);
        byte[] byteArray9 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray8);
        java.lang.String str10 = base64_2.encodeToString(byteArray9);
        java.lang.String str11 = base64_1.encodeAsString(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray13 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray12);
        byte[] byteArray14 = base64_1.decode(byteArray12);
        org.apache.commons.codec.binary.randoop.Base64 base64_16 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) 1, byteArray14, false);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_25 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray24);
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray29, false);
        boolean boolean33 = base64_25.isInAlphabet(byteArray31, true);
        byte[] byteArray35 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray36 = base64_25.decode(byteArray35);
        org.apache.commons.codec.binary.randoop.Base64 base64_37 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_38 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray42 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray44 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray42, false);
        byte[] byteArray45 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray44);
        java.lang.String str46 = base64_38.encodeToString(byteArray45);
        java.lang.String str47 = base64_37.encodeAsString(byteArray45);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_56 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray55);
        byte[] byteArray60 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray62 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray60, false);
        boolean boolean64 = base64_56.isInAlphabet(byteArray62, true);
        byte[] byteArray67 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray62, false, true);
        byte[] byteArray68 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray62);
        byte[] byteArray71 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray62, true, false);
        java.math.BigInteger bigInteger72 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray71);
        byte[] byteArray73 = base64_37.encode(byteArray71);
        java.lang.Object obj74 = base64_25.encode((java.lang.Object) byteArray73);
        byte[] byteArray78 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray80 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray78, false);
        byte[] byteArray81 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray80);
        byte[] byteArray82 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray80);
        java.lang.String str83 = base64_25.encodeAsString(byteArray80);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj84 = base64_16.encode((java.lang.Object) str83);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/woK" + "'", str11, "/woK");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "/woK" + "'", str46, "/woK");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "/woK" + "'", str47, "/woK");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger72);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str83, "L3dvSw==\001\n\n\ufffd\ufffd\n");
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray15, true, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray20);
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray21, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_24 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) 1, byteArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [VEROa2RsTjNQVDBOQ2c=]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[86, 69, 82, 79, 97, 50, 82, 115, 84, 106, 78, 81, 86, 68, 66, 79, 81, 50, 99, 61]");
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder1 = org.apache.commons.codec.binary.randoop.Base64.builder();
        byte[] byteArray3 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray3, true, true, (int) '#');
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder1.setLineSeparator(byteArray7);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder9 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy10 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder11 = builder9.setDecodingPolicy(codecPolicy10);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder13 = builder11.setPadding((byte) 1);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_22 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray21);
        byte[] byteArray23 = null;
        byte[] byteArray26 = base64_22.encode(byteArray23, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_27 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray33 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray31, false);
        byte[] byteArray34 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray33);
        java.lang.String str35 = base64_27.encodeToString(byteArray34);
        byte[] byteArray36 = base64_22.encode(byteArray34);
        byte[] byteArray37 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray36);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder38 = builder13.setLineSeparator(byteArray37);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder39 = builder1.setEncodeTable(byteArray37);
        org.apache.commons.codec.binary.randoop.Base64 base64_41 = new org.apache.commons.codec.binary.randoop.Base64((int) '4', byteArray37, false);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "/woK" + "'", str35, "/woK");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        byte[] byteArray1 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray4 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray1, false, true);
        byte[] byteArray5 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[68, 81, 111, 61, 13, 10]");
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        byte[] byteArray1 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[47, 119, 111, 75]");
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64((int) ' ');
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        byte[] byteArray0 = null;
        byte[] byteArray4 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray0, true, false, (-1));
        org.junit.Assert.assertNull(byteArray4);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray16, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray16, true, false);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj23 = base64_8.encode((java.lang.Object) bigInteger22);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[47, 119, 111, 75, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger22);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_2 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray6, false);
        byte[] byteArray9 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray8);
        java.lang.String str10 = base64_2.encodeToString(byteArray9);
        java.lang.String str11 = base64_1.encodeAsString(byteArray9);
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_21 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray20);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray25, false);
        boolean boolean29 = base64_21.isInAlphabet(byteArray27, true);
        org.apache.commons.codec.CodecPolicy codecPolicy30 = base64_21.getCodecPolicy();
        org.apache.commons.codec.binary.randoop.Base64 base64_31 = new org.apache.commons.codec.binary.randoop.Base64((int) 'a', byteArray9, false, codecPolicy30);
        byte[] byteArray33 = base64_31.decode("L3dvSw");
        byte[] byteArray35 = base64_31.decode("TDNkdlN3\001\n\n\ufffd\ufffd\nPT0NCg==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/woK" + "'", str11, "/woK");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + codecPolicy30 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy30.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_13 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray17, false);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray19);
        java.lang.String str21 = base64_13.encodeToString(byteArray20);
        byte[] byteArray22 = base64_8.encode(byteArray20);
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray26, false);
        byte[] byteArray29 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray28);
        java.lang.String str30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray28);
        byte[] byteArray31 = base64_8.decode(byteArray28);
        byte[] byteArray32 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray33 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray32);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray37 = base64_8.encode(byteArray32, (int) (byte) 10, 64);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/woK" + "'", str21, "/woK");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "L3dvSw" + "'", str30, "L3dvSw");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[68, 81, 111]");
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = base64_0.encodeToString(byteArray7);
        boolean boolean10 = base64_0.isInAlphabet("L3dvSw==\001\n\n\ufffd\ufffd\n");
        boolean boolean11 = base64_0.isUrlSafe();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_20 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray19);
        byte[] byteArray21 = null;
        byte[] byteArray24 = base64_20.encode(byteArray21, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_25 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray29, false);
        byte[] byteArray32 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray31);
        java.lang.String str33 = base64_25.encodeToString(byteArray32);
        byte[] byteArray34 = base64_20.encode(byteArray32);
        byte[] byteArray35 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray34);
        java.lang.Object obj37 = base64_0.decode((java.lang.Object) byteArray34);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "/woK" + "'", str33, "/woK");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[76, 51, 100, 118, 83, 119, 69, 75, 67, 118, 47, 47, 67, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj37);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        boolean boolean1 = org.apache.commons.codec.binary.randoop.Base64.isBase64("TDNkdlN3\001\n\n\ufffd\ufffd\nPT0NCg==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray19 = base64_9.decode("DQo");
        org.apache.commons.codec.binary.randoop.Base64 base64_20 = new org.apache.commons.codec.binary.randoop.Base64((-1), byteArray19);
        boolean boolean21 = base64_20.isStrictDecoding();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64((int) '#', byteArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [/woK]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "L3dvSw" + "'", str8, "L3dvSw");
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray19 = base64_8.decode(byteArray18);
        org.apache.commons.codec.binary.randoop.Base64 base64_20 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_21 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray25, false);
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray27);
        java.lang.String str29 = base64_21.encodeToString(byteArray28);
        java.lang.String str30 = base64_20.encodeAsString(byteArray28);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_39 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray38);
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray45 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray43, false);
        boolean boolean47 = base64_39.isInAlphabet(byteArray45, true);
        byte[] byteArray50 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray45, false, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray45);
        byte[] byteArray54 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray45, true, false);
        java.math.BigInteger bigInteger55 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray54);
        byte[] byteArray56 = base64_20.encode(byteArray54);
        java.lang.Object obj57 = base64_8.encode((java.lang.Object) byteArray56);
        org.apache.commons.codec.binary.randoop.Base64 base64_58 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_59 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray63 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray65 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray63, false);
        byte[] byteArray66 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray65);
        java.lang.String str67 = base64_59.encodeToString(byteArray66);
        java.lang.String str68 = base64_58.encodeAsString(byteArray66);
        byte[] byteArray69 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str70 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray69);
        java.lang.String str71 = base64_58.encodeToString(byteArray69);
        boolean boolean72 = base64_58.isStrictDecoding();
        byte[] byteArray74 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("");
        byte[] byteArray77 = base64_58.encode(byteArray74, (int) 'a', (int) (byte) 100);
        boolean boolean79 = base64_8.isInAlphabet(byteArray77, false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "/woK" + "'", str29, "/woK");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/woK" + "'", str30, "/woK");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "/woK" + "'", str67, "/woK");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "/woK" + "'", str68, "/woK");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "DQo" + "'", str70, "DQo");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "DQo=" + "'", str71, "DQo=");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, false, true);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[76, 51, 100, 118, 83, 119, 61, 61]");
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray20 = base64_9.decode(byteArray19);
        org.apache.commons.codec.binary.randoop.Base64 base64_21 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_22 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray26, false);
        byte[] byteArray29 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray28);
        java.lang.String str30 = base64_22.encodeToString(byteArray29);
        java.lang.String str31 = base64_21.encodeAsString(byteArray29);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_40 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray39);
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray46 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray44, false);
        boolean boolean48 = base64_40.isInAlphabet(byteArray46, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray46, false, true);
        byte[] byteArray52 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray46);
        byte[] byteArray55 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray46, true, false);
        java.math.BigInteger bigInteger56 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray55);
        byte[] byteArray57 = base64_21.encode(byteArray55);
        java.lang.Object obj58 = base64_9.encode((java.lang.Object) byteArray57);
        java.math.BigInteger bigInteger59 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_60 = new org.apache.commons.codec.binary.randoop.Base64((int) ' ', byteArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [TDNkdlN3PT0NCg==]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/woK" + "'", str30, "/woK");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "/woK" + "'", str31, "/woK");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(bigInteger59);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64 base64_4 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_5 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray9, false);
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray11);
        java.lang.String str13 = base64_5.encodeToString(byteArray12);
        java.lang.String str14 = base64_4.encodeAsString(byteArray12);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_24 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray23);
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray28, false);
        boolean boolean32 = base64_24.isInAlphabet(byteArray30, true);
        org.apache.commons.codec.CodecPolicy codecPolicy33 = base64_24.getCodecPolicy();
        org.apache.commons.codec.binary.randoop.Base64 base64_34 = new org.apache.commons.codec.binary.randoop.Base64((int) 'a', byteArray12, false, codecPolicy33);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder35 = builder0.setDecodingPolicy(codecPolicy33);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "/woK" + "'", str13, "/woK");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "/woK" + "'", str14, "/woK");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + codecPolicy33 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy33.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("/woK");
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray19);
        boolean boolean23 = base64_8.isInAlphabet(byteArray21, true);
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str25 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray24);
        java.lang.String str27 = base64_8.encodeAsString(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray26);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DQo" + "'", str20, "DQo");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DQo" + "'", str25, "DQo");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[68, 81, 111, 61]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "RFFvPQ==\001\n\n\ufffd\ufffd\n" + "'", str27, "RFFvPQ==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[82, 70, 70, 118, 80, 81]");
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        boolean boolean13 = base64_8.isStrictDecoding();
        boolean boolean14 = base64_8.isStrictDecoding();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("/woK");
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray19);
        boolean boolean23 = base64_8.isInAlphabet(byteArray21, true);
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str25 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray24);
        java.lang.String str27 = base64_8.encodeAsString(byteArray26);
        org.apache.commons.codec.binary.randoop.Base64 base64_28 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_29 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray35 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray33, false);
        byte[] byteArray36 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray35);
        java.lang.String str37 = base64_29.encodeToString(byteArray36);
        java.lang.String str38 = base64_28.encodeAsString(byteArray36);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_47 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray46);
        byte[] byteArray51 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray53 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray51, false);
        boolean boolean55 = base64_47.isInAlphabet(byteArray53, true);
        byte[] byteArray58 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray53, false, true);
        byte[] byteArray59 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray53);
        byte[] byteArray62 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray53, true, false);
        java.math.BigInteger bigInteger63 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray62);
        byte[] byteArray64 = base64_28.encode(byteArray62);
        long long65 = base64_8.getEncodedLength(byteArray62);
        java.lang.Class<?> wildcardClass66 = base64_8.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DQo" + "'", str20, "DQo");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DQo" + "'", str25, "DQo");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[68, 81, 111, 61]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "RFFvPQ==\001\n\n\ufffd\ufffd\n" + "'", str27, "RFFvPQ==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "/woK" + "'", str37, "/woK");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "/woK" + "'", str38, "/woK");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 28L + "'", long65 == 28L);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.randoop.Base64 base64_7 = builder2.get();
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = builder2.get();
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder2.setLineLength(64);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertNotNull(base64_8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setLineLength(0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_13 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray12);
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray17, false);
        boolean boolean21 = base64_13.isInAlphabet(byteArray19, true);
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray19, false, true);
        boolean boolean25 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray19);
        boolean boolean26 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray19);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder27 = builder2.setEncodeTable(byteArray19);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_2 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray6, false);
        byte[] byteArray9 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray8);
        java.lang.String str10 = base64_2.encodeToString(byteArray9);
        java.lang.String str11 = base64_1.encodeAsString(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray13 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray12);
        byte[] byteArray14 = base64_1.decode(byteArray12);
        org.apache.commons.codec.binary.randoop.Base64 base64_16 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) 1, byteArray14, false);
        boolean boolean18 = base64_16.isInAlphabet("DQo");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/woK" + "'", str11, "/woK");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        byte[] byteArray1 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("UkZGdkRRbz0=");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray1, false, false, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (12) than the specified maximum size of 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[82, 70, 70, 118, 68, 81, 111, 61]");
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setLineLength(0);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setPadding((byte) 100);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder6.setUrlSafe(true);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_17 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray16);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray21, false);
        boolean boolean25 = base64_17.isInAlphabet(byteArray23, true);
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray23, true);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder28 = builder8.setLineSeparator(byteArray23);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str13 = base64_0.encodeToString(byteArray11);
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray14);
        java.lang.Object obj17 = base64_0.encode((java.lang.Object) byteArray14);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder18 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy19 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder20 = builder18.setDecodingPolicy(codecPolicy19);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder22 = builder20.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy23 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder24 = builder20.setDecodingPolicy(codecPolicy23);
        org.apache.commons.codec.CodecPolicy codecPolicy25 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder26 = builder20.setDecodingPolicy(codecPolicy25);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder28 = builder26.setUrlSafe(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj29 = base64_0.encode((java.lang.Object) false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DQo" + "'", str12, "DQo");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo=" + "'", str13, "DQo=");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DQo" + "'", str15, "DQo");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray19 = base64_9.decode("DQo");
        org.apache.commons.codec.binary.randoop.Base64 base64_20 = new org.apache.commons.codec.binary.randoop.Base64((-1), byteArray19);
        boolean boolean21 = base64_20.isUrlSafe();
        boolean boolean23 = base64_20.isInAlphabet("RFFvPQ==");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        byte[] byteArray4 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, true, true, (int) '#');
        org.apache.commons.codec.binary.randoop.Base64.Builder builder9 = builder2.setLineSeparator(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str11 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray10);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder13 = builder2.setEncodeTable(byteArray10);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder15 = builder13.setPadding((byte) 0);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray19, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray21);
        boolean boolean24 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray23);
        java.math.BigInteger bigInteger26 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.encodeInteger(bigInteger26);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder28 = builder13.setLineSeparator(byteArray27);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DQo" + "'", str11, "DQo");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 61]");
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_13 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray17, false);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray19);
        java.lang.String str21 = base64_13.encodeToString(byteArray20);
        byte[] byteArray22 = base64_8.encode(byteArray20);
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray22);
        java.math.BigInteger bigInteger25 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray24);
        java.lang.String str26 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray24);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/woK" + "'", str21, "/woK");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[76, 51, 100, 118, 83, 119, 69, 75, 67, 118, 47, 47, 67, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "TDNkdlN3RUtDdi8vQ2c9PQ0K" + "'", str26, "TDNkdlN3RUtDdi8vQ2c9PQ0K");
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        byte[] byteArray1 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray4 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray1, false, true);
        byte[] byteArray5 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[68, 81, 111]");
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        long long7 = base64_0.getEncodedLength(byteArray2);
        boolean boolean8 = base64_0.isUrlSafe();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_17 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray16);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray21, false);
        boolean boolean25 = base64_17.isInAlphabet(byteArray23, true);
        byte[] byteArray27 = base64_17.decode("/woK");
        byte[] byteArray30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray27, true, false);
        boolean boolean31 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray30);
        byte[] byteArray32 = base64_0.decode(byteArray30);
        byte[] byteArray33 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray32);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4L + "'", long7 == 4L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[47, 119, 111, 75, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[95, 119, 111, 75]");
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder6.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder6.setLineLength(0);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder12 = builder6.setPadding((byte) 1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder14 = builder12.setLineLength((int) (short) 100);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder15 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy16 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder17 = builder15.setDecodingPolicy(codecPolicy16);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder19 = builder17.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy20 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder21 = builder17.setDecodingPolicy(codecPolicy20);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_30 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray29);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_39 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray38);
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray45 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray43, false);
        boolean boolean47 = base64_39.isInAlphabet(byteArray45, true);
        byte[] byteArray50 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray45, false, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray45);
        java.lang.String str52 = base64_30.encodeAsString(byteArray45);
        org.apache.commons.codec.CodecPolicy codecPolicy53 = base64_30.getCodecPolicy();
        org.apache.commons.codec.binary.randoop.Base64.Builder builder54 = builder17.setDecodingPolicy(codecPolicy53);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder55 = builder14.setDecodingPolicy(codecPolicy53);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str52, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertTrue("'" + codecPolicy53 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy53.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setPadding((byte) 0);
        org.apache.commons.codec.binary.randoop.Base64 base64_7 = builder2.get();
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy9 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder8.setDecodingPolicy(codecPolicy9);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder12 = builder10.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy13 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder14 = builder10.setDecodingPolicy(codecPolicy13);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray18, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray20);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder22 = builder14.setEncodeTable(byteArray20);
        long long23 = base64_7.getEncodedLength(byteArray20);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder24 = org.apache.commons.codec.binary.randoop.Base64.builder();
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray26, true, true, (int) '#');
        org.apache.commons.codec.binary.randoop.Base64.Builder builder31 = builder24.setLineSeparator(byteArray30);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder32 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy33 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder34 = builder32.setDecodingPolicy(codecPolicy33);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder36 = builder34.setPadding((byte) 1);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_45 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray44);
        byte[] byteArray46 = null;
        byte[] byteArray49 = base64_45.encode(byteArray46, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_50 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray54 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray56 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray54, false);
        byte[] byteArray57 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray56);
        java.lang.String str58 = base64_50.encodeToString(byteArray57);
        byte[] byteArray59 = base64_45.encode(byteArray57);
        byte[] byteArray60 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray59);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder61 = builder36.setLineSeparator(byteArray60);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder62 = builder24.setEncodeTable(byteArray60);
        byte[] byteArray63 = base64_7.encode(byteArray60);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 8L + "'", long23 == 8L);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "/woK" + "'", str58, "/woK");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[47, 119, 111, 75]");
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray6);
        boolean boolean9 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray8);
        org.apache.commons.codec.binary.randoop.Base64 base64_11 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_12 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray16, false);
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray18);
        java.lang.String str20 = base64_12.encodeToString(byteArray19);
        java.lang.String str21 = base64_11.encodeAsString(byteArray19);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_31 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray30);
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray37 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray35, false);
        boolean boolean39 = base64_31.isInAlphabet(byteArray37, true);
        byte[] byteArray41 = base64_31.decode("DQo");
        org.apache.commons.codec.binary.randoop.Base64 base64_42 = new org.apache.commons.codec.binary.randoop.Base64((-1), byteArray41);
        long long43 = base64_11.getEncodedLength(byteArray41);
        org.apache.commons.codec.CodecPolicy codecPolicy44 = base64_11.getCodecPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_45 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 10, byteArray8, true, codecPolicy44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [L3dvSw==]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "/woK" + "'", str20, "/woK");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/woK" + "'", str21, "/woK");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[13, 10]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 4L + "'", long43 == 4L);
        org.junit.Assert.assertTrue("'" + codecPolicy44 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy44.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_10 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray16 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, false);
        byte[] byteArray17 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray16);
        java.lang.String str18 = base64_10.encodeToString(byteArray17);
        java.lang.String str19 = base64_9.encodeAsString(byteArray17);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray20);
        byte[] byteArray22 = base64_9.decode(byteArray20);
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray23);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder26 = builder2.setEncodeTable(byteArray23);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "/woK" + "'", str18, "/woK");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "/woK" + "'", str19, "/woK");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = base64_0.encodeToString(byteArray7);
        boolean boolean10 = base64_0.isInAlphabet("L3dvSw==\001\n\n\ufffd\ufffd\n");
        boolean boolean11 = base64_0.isUrlSafe();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_20 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray19);
        byte[] byteArray21 = null;
        byte[] byteArray24 = base64_20.encode(byteArray21, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_25 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray29, false);
        byte[] byteArray32 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray31);
        java.lang.String str33 = base64_25.encodeToString(byteArray32);
        byte[] byteArray34 = base64_20.encode(byteArray32);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_43 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray42);
        byte[] byteArray47 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray49 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray47, false);
        boolean boolean51 = base64_43.isInAlphabet(byteArray49, true);
        byte[] byteArray53 = base64_43.decode("/woK");
        byte[] byteArray54 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str55 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray54);
        byte[] byteArray56 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray54);
        boolean boolean58 = base64_43.isInAlphabet(byteArray56, true);
        byte[] byteArray59 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str60 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray59);
        byte[] byteArray61 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray59);
        java.lang.String str62 = base64_43.encodeAsString(byteArray61);
        boolean boolean64 = base64_20.isInAlphabet(byteArray61, true);
        java.lang.String str65 = base64_0.encodeToString(byteArray61);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "/woK" + "'", str33, "/woK");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "DQo" + "'", str55, "DQo");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "DQo" + "'", str60, "DQo");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[68, 81, 111, 61]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "RFFvPQ==\001\n\n\ufffd\ufffd\n" + "'", str62, "RFFvPQ==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "RFFvPQ==" + "'", str65, "RFFvPQ==");
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_13 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray17, false);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray19);
        java.lang.String str21 = base64_13.encodeToString(byteArray20);
        byte[] byteArray22 = base64_8.encode(byteArray20);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_31 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray30);
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray37 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray35, false);
        boolean boolean39 = base64_31.isInAlphabet(byteArray37, true);
        byte[] byteArray41 = base64_31.decode("/woK");
        byte[] byteArray42 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str43 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray42);
        byte[] byteArray44 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray42);
        boolean boolean46 = base64_31.isInAlphabet(byteArray44, true);
        byte[] byteArray47 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str48 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray47);
        java.lang.String str50 = base64_31.encodeAsString(byteArray49);
        boolean boolean52 = base64_8.isInAlphabet(byteArray49, true);
        byte[] byteArray54 = base64_8.decode("L3dvSw");
        boolean boolean55 = base64_8.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/woK" + "'", str21, "/woK");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "DQo" + "'", str43, "DQo");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "DQo" + "'", str48, "DQo");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[68, 81, 111, 61]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "RFFvPQ==\001\n\n\ufffd\ufffd\n" + "'", str50, "RFFvPQ==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setLineLength(0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_13 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray12);
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray17, false);
        boolean boolean21 = base64_13.isInAlphabet(byteArray19, true);
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray19, true, false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder25 = builder4.setEncodeTable(byteArray19);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_18 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray17);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray22, false);
        boolean boolean26 = base64_18.isInAlphabet(byteArray24, true);
        byte[] byteArray29 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray24, false, true);
        byte[] byteArray30 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray24);
        java.lang.String str31 = base64_9.encodeAsString(byteArray24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_32 = new org.apache.commons.codec.binary.randoop.Base64(1, byteArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [/woK]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str31, "L3dvSw==\001\n\n\ufffd\ufffd\n");
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder1 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy2 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder3 = builder1.setDecodingPolicy(codecPolicy2);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder5 = builder3.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder7 = builder3.setPadding((byte) 0);
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = builder3.get();
        org.apache.commons.codec.binary.randoop.Base64.Builder builder9 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy10 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder11 = builder9.setDecodingPolicy(codecPolicy10);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder13 = builder11.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy14 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder15 = builder11.setDecodingPolicy(codecPolicy14);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray19, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray21);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder23 = builder15.setEncodeTable(byteArray21);
        long long24 = base64_8.getEncodedLength(byteArray21);
        org.apache.commons.codec.binary.randoop.Base64 base64_25 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray27, true, true, (int) '#');
        long long32 = base64_25.getEncodedLength(byteArray27);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_41 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray40);
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray47 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray45, false);
        boolean boolean49 = base64_41.isInAlphabet(byteArray47, true);
        byte[] byteArray52 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray47, true, false);
        byte[] byteArray53 = base64_25.encode(byteArray47);
        byte[] byteArray57 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray59 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray57, false);
        byte[] byteArray60 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray59);
        byte[] byteArray61 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray59);
        boolean boolean62 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray61);
        byte[] byteArray63 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray61);
        java.lang.Object obj64 = base64_25.decode((java.lang.Object) byteArray63);
        byte[] byteArray65 = base64_8.encode(byteArray63);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_66 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) 10, byteArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [/woK]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(base64_8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 8L + "'", long24 == 8L);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 4L + "'", long32 == 4L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[76, 51, 100, 118, 83, 119, 0, 0]");
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        boolean boolean13 = base64_8.isStrictDecoding();
        org.apache.commons.codec.binary.randoop.Base64.Builder builder14 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy15 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder16 = builder14.setDecodingPolicy(codecPolicy15);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder18 = builder16.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy19 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder20 = builder16.setDecodingPolicy(codecPolicy19);
        org.apache.commons.codec.CodecPolicy codecPolicy21 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder22 = builder16.setDecodingPolicy(codecPolicy21);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder24 = builder22.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64 base64_25 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_26 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray32 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray30, false);
        byte[] byteArray33 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray32);
        java.lang.String str34 = base64_26.encodeToString(byteArray33);
        java.lang.String str35 = base64_25.encodeAsString(byteArray33);
        byte[] byteArray36 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray37 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray36);
        byte[] byteArray38 = base64_25.decode(byteArray36);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder39 = builder22.setEncodeTable(byteArray36);
        byte[] byteArray42 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray36, true, true);
        boolean boolean44 = base64_8.isInAlphabet(byteArray36, false);
        byte[] byteArray45 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray36);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "/woK" + "'", str34, "/woK");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "/woK" + "'", str35, "/woK");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, false, true);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray14);
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, true, false);
        java.math.BigInteger bigInteger24 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray23);
        java.lang.String str25 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray23);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "TDNkdlN3PT0NCg==" + "'", str25, "TDNkdlN3PT0NCg==");
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray5 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray3, false);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(bigInteger6);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        byte[] byteArray4 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, true, true, (int) '#');
        org.apache.commons.codec.binary.randoop.Base64.Builder builder9 = builder2.setLineSeparator(byteArray8);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray8);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(bigInteger10);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64(true);
        org.apache.commons.codec.binary.randoop.Base64 base64_2 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_3 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray9 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray7, false);
        byte[] byteArray10 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray9);
        java.lang.String str11 = base64_3.encodeToString(byteArray10);
        java.lang.String str12 = base64_2.encodeAsString(byteArray10);
        byte[] byteArray13 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray13);
        byte[] byteArray15 = base64_2.decode(byteArray13);
        byte[] byteArray16 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray16);
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray16);
        java.lang.String str19 = base64_1.encodeToString(byteArray18);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/woK" + "'", str11, "/woK");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/woK" + "'", str12, "/woK");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray10, false);
        byte[] byteArray13 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray12);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder14 = builder6.setEncodeTable(byteArray12);
        org.apache.commons.codec.CodecPolicy codecPolicy15 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder16 = builder6.setDecodingPolicy(codecPolicy15);
        java.lang.Class<?> wildcardClass17 = builder6.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray19 = base64_9.decode("DQo");
        org.apache.commons.codec.binary.randoop.Base64 base64_20 = new org.apache.commons.codec.binary.randoop.Base64((-1), byteArray19);
        boolean boolean21 = base64_20.isUrlSafe();
        byte[] byteArray23 = base64_20.decode("AQoK//8K\001\n\n\ufffd\ufffd\n");
        boolean boolean24 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray23);
        boolean boolean25 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray23);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("/woK");
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray19);
        boolean boolean23 = base64_8.isInAlphabet(byteArray21, true);
        org.apache.commons.codec.CodecPolicy codecPolicy24 = base64_8.getCodecPolicy();
        java.lang.Class<?> wildcardClass25 = codecPolicy24.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DQo" + "'", str20, "DQo");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + codecPolicy24 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy24.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray19 = base64_9.decode("/woK");
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str21 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray20);
        boolean boolean24 = base64_9.isInAlphabet(byteArray22, true);
        byte[] byteArray25 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str26 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray25);
        java.lang.String str28 = base64_9.encodeAsString(byteArray27);
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_38 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray37);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_47 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray46);
        byte[] byteArray51 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray53 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray51, false);
        boolean boolean55 = base64_47.isInAlphabet(byteArray53, true);
        byte[] byteArray58 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray53, false, true);
        byte[] byteArray59 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray53);
        java.lang.String str60 = base64_38.encodeAsString(byteArray53);
        org.apache.commons.codec.CodecPolicy codecPolicy61 = base64_38.getCodecPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_62 = new org.apache.commons.codec.binary.randoop.Base64((int) ' ', byteArray27, true, codecPolicy61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [DQo=]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DQo" + "'", str21, "DQo");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DQo" + "'", str26, "DQo");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[68, 81, 111, 61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "RFFvPQ==\001\n\n\ufffd\ufffd\n" + "'", str28, "RFFvPQ==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str60, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertTrue("'" + codecPolicy61 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy61.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray1);
        org.apache.commons.codec.binary.randoop.Base64 base64_3 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) 10, byteArray1);
        byte[] byteArray4 = null;
        java.lang.String str5 = base64_3.encodeToString(byteArray4);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray19 = base64_9.decode("DQo");
        org.apache.commons.codec.binary.randoop.Base64 base64_20 = new org.apache.commons.codec.binary.randoop.Base64((-1), byteArray19);
        org.apache.commons.codec.binary.randoop.Base64 base64_21 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_22 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray26, false);
        byte[] byteArray29 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray28);
        java.lang.String str30 = base64_22.encodeToString(byteArray29);
        java.lang.String str31 = base64_21.encodeAsString(byteArray29);
        byte[] byteArray32 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str33 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray32);
        java.lang.String str34 = base64_21.encodeToString(byteArray32);
        byte[] byteArray37 = base64_20.encode(byteArray32, (int) (short) 100, 0);
        org.apache.commons.codec.binary.randoop.Base64 base64_38 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_39 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray45 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray43, false);
        byte[] byteArray46 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray45);
        java.lang.String str47 = base64_39.encodeToString(byteArray46);
        java.lang.String str48 = base64_38.encodeAsString(byteArray46);
        byte[] byteArray49 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray50 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray49);
        byte[] byteArray51 = base64_38.decode(byteArray49);
        byte[] byteArray52 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray51);
        byte[] byteArray53 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray52);
        long long54 = base64_20.getEncodedLength(byteArray52);
        boolean boolean55 = base64_20.isUrlSafe();
        org.apache.commons.codec.binary.randoop.Base64 base64_56 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_57 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray61 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray63 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray61, false);
        byte[] byteArray64 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray63);
        java.lang.String str65 = base64_57.encodeToString(byteArray64);
        java.lang.String str66 = base64_56.encodeAsString(byteArray64);
        byte[] byteArray67 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray68 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray67);
        byte[] byteArray69 = base64_56.decode(byteArray67);
        byte[] byteArray70 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray69);
        byte[] byteArray71 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray70);
        java.lang.String str72 = base64_20.encodeAsString(byteArray70);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/woK" + "'", str30, "/woK");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "/woK" + "'", str31, "/woK");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "DQo" + "'", str33, "DQo");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "DQo=" + "'", str34, "DQo=");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "/woK" + "'", str47, "/woK");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "/woK" + "'", str48, "/woK");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "/woK" + "'", str65, "/woK");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "/woK" + "'", str66, "/woK");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        boolean boolean1 = org.apache.commons.codec.binary.randoop.Base64.isBase64("AAoKCgoB");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 1);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        boolean boolean13 = base64_8.isStrictDecoding();
        org.apache.commons.codec.binary.randoop.Base64 base64_14 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray16 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray16, true, true, (int) '#');
        long long21 = base64_14.getEncodedLength(byteArray16);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_30 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray29);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray36 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray34, false);
        boolean boolean38 = base64_30.isInAlphabet(byteArray36, true);
        byte[] byteArray41 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray36, true, false);
        byte[] byteArray42 = base64_14.encode(byteArray36);
        java.lang.String str43 = base64_8.encodeToString(byteArray42);
        java.lang.String str44 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray42);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4L + "'", long21 == 4L);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n" + "'", str43, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "TDNkdlN3PT0" + "'", str44, "TDNkdlN3PT0");
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setLineLength(64);
        java.lang.Class<?> wildcardClass5 = builder4.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder2.setDecodingPolicy(codecPolicy7);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64 base64_11 = builder2.get();
        java.lang.Object obj12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = base64_11.encode(obj12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(base64_11);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray10 = null;
        byte[] byteArray13 = base64_9.encode(byteArray10, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_14 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray18, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray20);
        java.lang.String str22 = base64_14.encodeToString(byteArray21);
        byte[] byteArray23 = base64_9.encode(byteArray21);
        org.apache.commons.codec.binary.randoop.Base64 base64_24 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 100, byteArray21);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder25 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy26 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder27 = builder25.setDecodingPolicy(codecPolicy26);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder29 = builder27.setLineLength(0);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder31 = builder27.setPadding((byte) 100);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder33 = builder31.setUrlSafe(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj34 = base64_24.decode((java.lang.Object) true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "/woK" + "'", str22, "/woK");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray11);
        byte[] byteArray13 = base64_0.decode(byteArray11);
        org.apache.commons.codec.binary.randoop.Base64 base64_14 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_15 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray19, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray21);
        java.lang.String str23 = base64_15.encodeToString(byteArray22);
        java.lang.String str24 = base64_14.encodeAsString(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str26 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray25);
        java.lang.String str27 = base64_14.encodeToString(byteArray25);
        byte[] byteArray29 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray32 = base64_14.encode(byteArray29, 1, 0);
        java.lang.String str33 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray32);
        java.lang.String str34 = base64_0.encodeToString(byteArray32);
        byte[] byteArray38 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray32, false, false, (int) (byte) 0);
        byte[] byteArray39 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray38);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "/woK" + "'", str23, "/woK");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "/woK" + "'", str24, "/woK");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DQo" + "'", str26, "DQo");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "DQo=" + "'", str27, "DQo=");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray19 = base64_9.decode("DQo");
        org.apache.commons.codec.binary.randoop.Base64 base64_20 = new org.apache.commons.codec.binary.randoop.Base64((-1), byteArray19);
        org.apache.commons.codec.binary.randoop.Base64 base64_21 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_22 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray26, false);
        byte[] byteArray29 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray28);
        java.lang.String str30 = base64_22.encodeToString(byteArray29);
        java.lang.String str31 = base64_21.encodeAsString(byteArray29);
        byte[] byteArray32 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str33 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray32);
        java.lang.String str34 = base64_21.encodeToString(byteArray32);
        byte[] byteArray37 = base64_20.encode(byteArray32, (int) (short) 100, 0);
        boolean boolean38 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray37);
        java.math.BigInteger bigInteger39 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray37);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/woK" + "'", str30, "/woK");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "/woK" + "'", str31, "/woK");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "DQo" + "'", str33, "DQo");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "DQo=" + "'", str34, "DQo=");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(bigInteger39);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder2.setUrlSafe(true);
        byte[] byteArray9 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder2.setLineSeparator(byteArray9);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray19 = base64_8.decode(byteArray18);
        byte[] byteArray22 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray18, false, true);
        boolean boolean23 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray22);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[65, 65, 111, 75, 67, 103, 111, 66]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        long long7 = base64_0.getEncodedLength(byteArray2);
        boolean boolean8 = base64_0.isUrlSafe();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_17 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray16);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray21, false);
        boolean boolean25 = base64_17.isInAlphabet(byteArray23, true);
        byte[] byteArray27 = base64_17.decode("/woK");
        byte[] byteArray30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray27, true, false);
        boolean boolean31 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray30);
        byte[] byteArray32 = base64_0.decode(byteArray30);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder33 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy34 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder35 = builder33.setDecodingPolicy(codecPolicy34);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder37 = builder35.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder39 = builder35.setPadding((byte) 0);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_48 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray47);
        byte[] byteArray52 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray54 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray52, false);
        boolean boolean56 = base64_48.isInAlphabet(byteArray54, true);
        byte[] byteArray59 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray54, false, true);
        byte[] byteArray60 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray54);
        byte[] byteArray63 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray54, true, false);
        java.math.BigInteger bigInteger64 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray63);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder65 = builder39.setEncodeTable(byteArray63);
        boolean boolean67 = base64_0.isInAlphabet(byteArray63, false);
        org.apache.commons.codec.binary.randoop.Base64 base64_68 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_69 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray73 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray75 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray73, false);
        byte[] byteArray76 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray75);
        java.lang.String str77 = base64_69.encodeToString(byteArray76);
        java.lang.String str78 = base64_68.encodeAsString(byteArray76);
        byte[] byteArray79 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray80 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray79);
        byte[] byteArray81 = base64_68.decode(byteArray79);
        byte[] byteArray82 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray81);
        java.lang.Object obj83 = base64_0.encode((java.lang.Object) byteArray81);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4L + "'", long7 == 4L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[47, 119, 111, 75, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "/woK" + "'", str77, "/woK");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "/woK" + "'", str78, "/woK");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(obj83);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        boolean boolean1 = org.apache.commons.codec.binary.randoop.Base64.isBase64("RFFvPQ==");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray1);
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray1, false, true, (int) (short) -1);
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) -1, byteArray1, false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder9 = org.apache.commons.codec.binary.randoop.Base64.builder();
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray11, true, true, (int) '#');
        org.apache.commons.codec.binary.randoop.Base64.Builder builder16 = builder9.setLineSeparator(byteArray15);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder17 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy18 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder19 = builder17.setDecodingPolicy(codecPolicy18);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder21 = builder19.setPadding((byte) 1);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_30 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray29);
        byte[] byteArray31 = null;
        byte[] byteArray34 = base64_30.encode(byteArray31, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_35 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray39 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray41 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray39, false);
        byte[] byteArray42 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray41);
        java.lang.String str43 = base64_35.encodeToString(byteArray42);
        byte[] byteArray44 = base64_30.encode(byteArray42);
        byte[] byteArray45 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray44);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder46 = builder21.setLineSeparator(byteArray45);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder47 = builder9.setEncodeTable(byteArray45);
        long long48 = base64_8.getEncodedLength(byteArray45);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "/woK" + "'", str43, "/woK");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 4L + "'", long48 == 4L);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_17 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray16);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray21, false);
        boolean boolean25 = base64_17.isInAlphabet(byteArray23, true);
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray23, false, true);
        byte[] byteArray29 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray23);
        java.lang.String str30 = base64_8.encodeAsString(byteArray23);
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray23);
        byte[] byteArray32 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray31);
        byte[] byteArray33 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray32);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str30, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[86, 69, 82, 79, 97, 50, 82, 115, 84, 106, 78, 81, 86, 68, 66, 79, 81, 50, 99, 61, 13, 10]");
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_19 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray18);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray25 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray23, false);
        boolean boolean27 = base64_19.isInAlphabet(byteArray25, true);
        byte[] byteArray30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray25, false, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray25);
        byte[] byteArray34 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray25, true, false);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray34);
        byte[] byteArray36 = base64_0.encode(byteArray34);
        byte[] byteArray37 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray36);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[86, 69, 82, 79, 97, 50, 82, 115, 84, 106, 78, 81, 86, 68, 66, 79, 81, 50, 99, 57, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64(10);
        org.apache.commons.codec.binary.randoop.Base64 base64_2 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_3 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray9 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray7, false);
        byte[] byteArray10 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray9);
        java.lang.String str11 = base64_3.encodeToString(byteArray10);
        java.lang.String str12 = base64_2.encodeAsString(byteArray10);
        byte[] byteArray13 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray13);
        java.lang.String str15 = base64_2.encodeToString(byteArray13);
        byte[] byteArray17 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray20 = base64_2.encode(byteArray17, 1, 0);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray24, false);
        long long27 = base64_2.getEncodedLength(byteArray26);
        java.lang.Class<?> wildcardClass28 = byteArray26.getClass();
        java.lang.Object obj29 = base64_1.decode((java.lang.Object) byteArray26);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/woK" + "'", str11, "/woK");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/woK" + "'", str12, "/woK");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DQo" + "'", str14, "DQo");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DQo=" + "'", str15, "DQo=");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 8L + "'", long27 == 8L);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(obj29);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        long long7 = base64_0.getEncodedLength(byteArray2);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_16 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray15);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray22 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray20, false);
        boolean boolean24 = base64_16.isInAlphabet(byteArray22, true);
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray22, false, true);
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray22);
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray22, true, false);
        java.math.BigInteger bigInteger32 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray31);
        byte[] byteArray33 = org.apache.commons.codec.binary.randoop.Base64.encodeInteger(bigInteger32);
        byte[] byteArray34 = org.apache.commons.codec.binary.randoop.Base64.encodeInteger(bigInteger32);
        boolean boolean36 = base64_0.isInAlphabet(byteArray34, true);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4L + "'", long7 == 4L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str13 = base64_0.encodeToString(byteArray11);
        org.apache.commons.codec.binary.randoop.Base64 base64_14 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray18, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray20);
        java.lang.String str22 = base64_14.encodeToString(byteArray21);
        byte[] byteArray23 = base64_0.decode(byteArray21);
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray21);
        boolean boolean25 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray24);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DQo" + "'", str12, "DQo");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo=" + "'", str13, "DQo=");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "/woK" + "'", str22, "/woK");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        org.apache.commons.codec.binary.randoop.Base64.Builder builder7 = builder0.setLineSeparator(byteArray6);
        byte[] byteArray9 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray6, false);
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray9, true, false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[82, 70, 70, 118, 68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[85, 107, 90, 71, 100, 107, 82, 82, 98, 122, 48, 61, 13, 10]");
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = base64_0.encodeToString(byteArray7);
        boolean boolean10 = base64_0.isInAlphabet("L3dvSw==\001\n\n\ufffd\ufffd\n");
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_19 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray18);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray25 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray23, false);
        boolean boolean27 = base64_19.isInAlphabet(byteArray25, true);
        byte[] byteArray29 = base64_19.decode("DQo");
        boolean boolean30 = base64_19.isUrlSafe();
        byte[] byteArray32 = base64_19.decode("DQo=");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder33 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy34 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder35 = builder33.setDecodingPolicy(codecPolicy34);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder37 = builder35.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder39 = builder35.setPadding((byte) 0);
        org.apache.commons.codec.binary.randoop.Base64 base64_40 = builder35.get();
        org.apache.commons.codec.binary.randoop.Base64.Builder builder41 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy42 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder43 = builder41.setDecodingPolicy(codecPolicy42);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder45 = builder43.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy46 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder47 = builder43.setDecodingPolicy(codecPolicy46);
        byte[] byteArray51 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray53 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray51, false);
        byte[] byteArray54 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray53);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder55 = builder47.setEncodeTable(byteArray53);
        long long56 = base64_40.getEncodedLength(byteArray53);
        java.lang.String str57 = base64_19.encodeToString(byteArray53);
        java.lang.String str58 = base64_0.encodeAsString(byteArray53);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[13, 10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[13, 10]");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(base64_40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 8L + "'", long56 == 8L);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str57, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "L3dvSw==" + "'", str58, "L3dvSw==");
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = base64_0.encodeToString(byteArray7);
        byte[] byteArray10 = base64_0.decode("");
        boolean boolean12 = base64_0.isInAlphabet("AQoK//8K");
        byte[] byteArray13 = null;
        java.lang.String str14 = base64_0.encodeToString(byteArray13);
        boolean boolean16 = base64_0.isInAlphabet("TDNkdlN3\r\n");
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_25 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray24);
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray29, false);
        boolean boolean33 = base64_25.isInAlphabet(byteArray31, true);
        byte[] byteArray35 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray36 = base64_25.decode(byteArray35);
        org.apache.commons.codec.binary.randoop.Base64 base64_37 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_38 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray42 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray44 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray42, false);
        byte[] byteArray45 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray44);
        java.lang.String str46 = base64_38.encodeToString(byteArray45);
        java.lang.String str47 = base64_37.encodeAsString(byteArray45);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_56 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray55);
        byte[] byteArray60 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray62 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray60, false);
        boolean boolean64 = base64_56.isInAlphabet(byteArray62, true);
        byte[] byteArray67 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray62, false, true);
        byte[] byteArray68 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray62);
        byte[] byteArray71 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray62, true, false);
        java.math.BigInteger bigInteger72 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray71);
        byte[] byteArray73 = base64_37.encode(byteArray71);
        java.lang.Object obj74 = base64_25.encode((java.lang.Object) byteArray73);
        java.lang.String str75 = base64_0.encodeToString(byteArray73);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "/woK" + "'", str46, "/woK");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "/woK" + "'", str47, "/woK");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger72);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "VEROa2RsTjNQVDBOQ2c9PQ==" + "'", str75, "VEROa2RsTjNQVDBOQ2c9PQ==");
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray11);
        byte[] byteArray13 = base64_0.decode(byteArray11);
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray13);
        byte[] byteArray16 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy2 = base64_1.getCodecPolicy();
        byte[] byteArray3 = null;
        byte[] byteArray4 = base64_1.encode(byteArray3);
        org.junit.Assert.assertTrue("'" + codecPolicy2 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy2.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNull(byteArray4);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder6.setDecodingPolicy(codecPolicy7);
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = builder8.get();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(base64_9);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str13 = base64_0.encodeToString(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray18 = base64_0.encode(byteArray15, 1, 0);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray22, false);
        long long25 = base64_0.getEncodedLength(byteArray24);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_35 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray34);
        byte[] byteArray39 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray41 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray39, false);
        boolean boolean43 = base64_35.isInAlphabet(byteArray41, true);
        byte[] byteArray45 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray46 = base64_35.decode(byteArray45);
        org.apache.commons.codec.binary.randoop.Base64 base64_47 = new org.apache.commons.codec.binary.randoop.Base64((int) '4', byteArray45);
        byte[] byteArray48 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray49 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray48);
        byte[] byteArray50 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray48);
        java.lang.String str51 = base64_47.encodeToString(byteArray48);
        org.apache.commons.codec.binary.randoop.Base64 base64_53 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 100);
        byte[] byteArray54 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str55 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray54);
        byte[] byteArray56 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray54);
        byte[] byteArray57 = base64_53.encode(byteArray56);
        boolean boolean59 = base64_47.isInAlphabet(byteArray56, false);
        java.lang.String str60 = base64_0.encodeAsString(byteArray56);
        byte[] byteArray64 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray66 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray64, false);
        byte[] byteArray67 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray66);
        java.lang.String str68 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray66);
        long long69 = base64_0.getEncodedLength(byteArray66);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DQo" + "'", str12, "DQo");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo=" + "'", str13, "DQo=");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 8L + "'", long25 == 8L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[68, 81, 111, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "DQo=\000\n\n\n\n\001" + "'", str51, "DQo=\000\n\n\n\n\001");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "DQo" + "'", str55, "DQo");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[82, 70, 70, 118, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "RFFvPQ==" + "'", str60, "RFFvPQ==");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "L3dvSw" + "'", str68, "L3dvSw");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 8L + "'", long69 == 8L);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        org.apache.commons.codec.binary.randoop.Base64.Builder builder7 = builder0.setLineSeparator(byteArray6);
        byte[] byteArray9 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray6, false);
        java.lang.String str10 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray6);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[82, 70, 70, 118, 68, 81, 111, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RFFvDQo" + "'", str10, "RFFvDQo");
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.randoop.Base64 base64_7 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray14);
        java.lang.String str16 = base64_8.encodeToString(byteArray15);
        java.lang.String str17 = base64_7.encodeAsString(byteArray15);
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray18);
        java.lang.String str20 = base64_7.encodeToString(byteArray18);
        boolean boolean21 = base64_7.isStrictDecoding();
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("");
        byte[] byteArray26 = base64_7.encode(byteArray23, (int) 'a', (int) (byte) 100);
        boolean boolean27 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray26);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder28 = builder2.setLineSeparator(byteArray26);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "/woK" + "'", str16, "/woK");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "/woK" + "'", str17, "/woK");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DQo" + "'", str19, "DQo");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DQo=" + "'", str20, "DQo=");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        boolean boolean13 = base64_8.isStrictDecoding();
        org.apache.commons.codec.binary.randoop.Base64.Builder builder14 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy15 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder16 = builder14.setDecodingPolicy(codecPolicy15);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder18 = builder16.setLineLength(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj19 = base64_8.decode((java.lang.Object) builder18);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray19 = base64_8.decode(byteArray18);
        boolean boolean20 = base64_8.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("/woK");
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray19);
        boolean boolean23 = base64_8.isInAlphabet(byteArray21, true);
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str25 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray24);
        java.lang.String str27 = base64_8.encodeAsString(byteArray26);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_36 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray35);
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray42 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray40, false);
        boolean boolean44 = base64_36.isInAlphabet(byteArray42, true);
        byte[] byteArray46 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray47 = base64_36.decode(byteArray46);
        byte[] byteArray50 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray46, false, true);
        long long51 = base64_8.getEncodedLength(byteArray46);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DQo" + "'", str20, "DQo");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DQo" + "'", str25, "DQo");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[68, 81, 111, 61]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "RFFvPQ==\001\n\n\ufffd\ufffd\n" + "'", str27, "RFFvPQ==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[65, 65, 111, 75, 67, 103, 111, 66]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 14L + "'", long51 == 14L);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder2.setUrlSafe(false);
        byte[] byteArray10 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("");
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray10, true);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder13 = builder8.setEncodeTable(byteArray12);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray20 = base64_9.decode(byteArray19);
        org.apache.commons.codec.binary.randoop.Base64 base64_21 = new org.apache.commons.codec.binary.randoop.Base64((int) '4', byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray22);
        java.lang.String str25 = base64_21.encodeToString(byteArray22);
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray22);
        byte[] byteArray30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray22, true, true, (int) ' ');
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[68, 81, 111, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DQo=\000\n\n\n\n\001" + "'", str25, "DQo=\000\n\n\n\n\001");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[68, 81, 111, 13, 10]");
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, true, false);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray19);
        java.lang.Class<?> wildcardClass21 = byteArray20.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray19 = base64_9.decode("DQo");
        org.apache.commons.codec.binary.randoop.Base64 base64_20 = new org.apache.commons.codec.binary.randoop.Base64((-1), byteArray19);
        boolean boolean21 = base64_20.isUrlSafe();
        byte[] byteArray23 = base64_20.decode("AQoK//8K\001\n\n\ufffd\ufffd\n");
        org.apache.commons.codec.binary.randoop.Base64 base64_24 = new org.apache.commons.codec.binary.randoop.Base64();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj25 = base64_20.encode((java.lang.Object) base64_24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 10, 10, -1, -1, 10]");
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        boolean boolean1 = org.apache.commons.codec.binary.randoop.Base64.isBase64("VEROa2RsTjNQVDBOQ2c9PQ==");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) 0);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder6.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder6.setLineLength(0);
        org.apache.commons.codec.binary.randoop.Base64 base64_11 = builder10.get();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(base64_11);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setPadding((byte) 0);
        org.apache.commons.codec.binary.randoop.Base64 base64_7 = builder2.get();
        byte[] byteArray9 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AQoK//8K");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder2.setEncodeTable(byteArray9);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder12 = builder10.setUrlSafe(true);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder14 = builder12.setUrlSafe(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder2.setDecodingPolicy(codecPolicy7);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder8.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder12 = builder10.setPadding((byte) -1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder14 = builder12.setUrlSafe(true);
        org.apache.commons.codec.binary.randoop.Base64 base64_15 = builder14.get();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(base64_15);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setPadding((byte) 0);
        org.apache.commons.codec.binary.randoop.Base64 base64_7 = builder2.get();
        byte[] byteArray9 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AQoK//8K");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder2.setEncodeTable(byteArray9);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder12 = builder10.setUrlSafe(true);
        org.apache.commons.codec.binary.randoop.Base64 base64_13 = builder12.get();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(base64_13);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder2.setDecodingPolicy(codecPolicy7);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder8.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64 base64_11 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_12 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray16, false);
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray18);
        java.lang.String str20 = base64_12.encodeToString(byteArray19);
        java.lang.String str21 = base64_11.encodeAsString(byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray24 = base64_11.decode(byteArray22);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder25 = builder8.setEncodeTable(byteArray22);
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray22, true, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray22, false, true);
        byte[] byteArray32 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray22);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "/woK" + "'", str20, "/woK");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/woK" + "'", str21, "/woK");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[68, 81, 111, 61]");
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        byte[] byteArray1 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray1);
        byte[] byteArray3 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray1);
        org.apache.commons.codec.binary.randoop.Base64 base64_5 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 0, byteArray1, true);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray1, false);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[68, 81, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[68, 81, 111, 61]");
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray3 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray3, true, true, (int) '#');
        long long8 = base64_1.getEncodedLength(byteArray3);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_17 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray16);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray21, false);
        boolean boolean25 = base64_17.isInAlphabet(byteArray23, true);
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray23, true, false);
        byte[] byteArray29 = base64_1.encode(byteArray23);
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray35 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray33, false);
        byte[] byteArray36 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray35);
        byte[] byteArray37 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray35);
        boolean boolean38 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray37);
        byte[] byteArray39 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray37);
        java.lang.Object obj40 = base64_1.decode((java.lang.Object) byteArray39);
        org.apache.commons.codec.binary.randoop.Base64 base64_43 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy44 = base64_43.getCodecPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_45 = new org.apache.commons.codec.binary.randoop.Base64(1, byteArray39, true, codecPolicy44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [/woK]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4L + "'", long8 == 4L);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + codecPolicy44 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy44.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("RFFvPQ==\001\n\n\ufffd\ufffd\n");
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_13 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray12);
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray17, false);
        boolean boolean21 = base64_13.isInAlphabet(byteArray19, true);
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray24 = base64_13.decode(byteArray23);
        org.apache.commons.codec.binary.randoop.Base64 base64_25 = new org.apache.commons.codec.binary.randoop.Base64((int) '4', byteArray23);
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray26);
        java.lang.String str29 = base64_25.encodeToString(byteArray26);
        org.apache.commons.codec.binary.randoop.Base64 base64_31 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 100);
        byte[] byteArray32 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str33 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray32);
        byte[] byteArray35 = base64_31.encode(byteArray34);
        boolean boolean37 = base64_25.isInAlphabet(byteArray34, false);
        org.apache.commons.codec.CodecPolicy codecPolicy38 = base64_25.getCodecPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_39 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) 0, byteArray2, true, codecPolicy38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [DQo=]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[68, 81, 111, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "DQo=\000\n\n\n\n\001" + "'", str29, "DQo=\000\n\n\n\n\001");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "DQo" + "'", str33, "DQo");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[82, 70, 70, 118, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy38 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy38.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 100);
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str3 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray2);
        byte[] byteArray5 = base64_1.encode(byteArray4);
        java.lang.Class<?> wildcardClass6 = byteArray4.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "DQo" + "'", str3, "DQo");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[82, 70, 70, 118, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray5 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray3, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray3, true, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray3);
        byte[] byteArray10 = org.apache.commons.codec.binary.randoop.Base64.encodeInteger(bigInteger9);
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray10, true, false, (int) (byte) 10);
        byte[] byteArray17 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, false, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 75, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        byte[] byteArray1 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("RFFvPQ==\001\n\n\ufffd\ufffd\n");
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[82, 70, 70, 118, 80, 81]");
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        byte[] byteArray1 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("VEROa2RsTjNQVDBOQ2c9PQ==");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean1 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"arrayOctet\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str13 = base64_0.encodeToString(byteArray11);
        boolean boolean14 = base64_0.isStrictDecoding();
        boolean boolean15 = base64_0.isStrictDecoding();
        boolean boolean16 = base64_0.isUrlSafe();
        boolean boolean17 = base64_0.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DQo" + "'", str12, "DQo");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo=" + "'", str13, "DQo=");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        long long7 = base64_0.getEncodedLength(byteArray2);
        boolean boolean8 = base64_0.isUrlSafe();
        byte[] byteArray10 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray10, true, true, (int) '#');
        byte[] byteArray15 = base64_0.encode(byteArray14);
        java.lang.String str16 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray15);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4L + "'", long7 == 4L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[82, 70, 70, 118, 68, 81, 111, 61]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UkZGdkRRbz0=" + "'", str16, "UkZGdkRRbz0=");
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("/woK");
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray19);
        boolean boolean23 = base64_8.isInAlphabet(byteArray21, true);
        org.apache.commons.codec.CodecPolicy codecPolicy24 = base64_8.getCodecPolicy();
        byte[] byteArray26 = base64_8.decode("AQoK//8K");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DQo" + "'", str20, "DQo");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + codecPolicy24 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy24.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 10, 10, -1, -1, 10]");
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) 10);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64((int) 'a');
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        boolean boolean1 = org.apache.commons.codec.binary.randoop.Base64.isBase64("RFFvDQo=\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        byte[] byteArray1 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray5 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray1, true, true, (int) '#');
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray1);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[68, 81, 111]");
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setPadding((byte) 0);
        org.apache.commons.codec.binary.randoop.Base64 base64_7 = builder2.get();
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy9 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder8.setDecodingPolicy(codecPolicy9);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder12 = builder10.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy13 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder14 = builder10.setDecodingPolicy(codecPolicy13);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray18, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray20);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder22 = builder14.setEncodeTable(byteArray20);
        long long23 = base64_7.getEncodedLength(byteArray20);
        org.apache.commons.codec.binary.randoop.Base64 base64_24 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray26, true, true, (int) '#');
        long long31 = base64_24.getEncodedLength(byteArray26);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_40 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray39);
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray46 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray44, false);
        boolean boolean48 = base64_40.isInAlphabet(byteArray46, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray46, true, false);
        byte[] byteArray52 = base64_24.encode(byteArray46);
        byte[] byteArray56 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray58 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray56, false);
        byte[] byteArray59 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray58);
        byte[] byteArray60 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray58);
        boolean boolean61 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray60);
        byte[] byteArray62 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray60);
        java.lang.Object obj63 = base64_24.decode((java.lang.Object) byteArray62);
        byte[] byteArray64 = base64_7.encode(byteArray62);
        boolean boolean65 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray64);
        byte[] byteArray67 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray64, true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 8L + "'", long23 == 8L);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 4L + "'", long31 == 4L);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[76, 51, 100, 118, 83, 119, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[84, 68, 78, 107, 100, 108, 78, 51, 65, 65, 65, 61, 13, 10]");
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder1 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy2 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder3 = builder1.setDecodingPolicy(codecPolicy2);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder5 = builder3.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder7 = builder3.setPadding((byte) 0);
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = builder3.get();
        org.apache.commons.codec.binary.randoop.Base64.Builder builder9 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy10 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder11 = builder9.setDecodingPolicy(codecPolicy10);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder13 = builder11.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy14 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder15 = builder11.setDecodingPolicy(codecPolicy14);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray19, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray21);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder23 = builder15.setEncodeTable(byteArray21);
        long long24 = base64_8.getEncodedLength(byteArray21);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_26 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 100, byteArray21, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [/woK]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(base64_8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 8L + "'", long24 == 8L);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray19 = base64_8.decode(byteArray18);
        org.apache.commons.codec.binary.randoop.Base64 base64_20 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_21 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray25, false);
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray27);
        java.lang.String str29 = base64_21.encodeToString(byteArray28);
        java.lang.String str30 = base64_20.encodeAsString(byteArray28);
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str32 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray31);
        java.lang.String str33 = base64_20.encodeToString(byteArray31);
        boolean boolean34 = base64_20.isStrictDecoding();
        byte[] byteArray36 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("");
        byte[] byteArray39 = base64_20.encode(byteArray36, (int) 'a', (int) (byte) 100);
        java.math.BigInteger bigInteger40 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray39);
        byte[] byteArray43 = base64_8.encode(byteArray39, 76, (int) (short) -1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "/woK" + "'", str29, "/woK");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/woK" + "'", str30, "/woK");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "DQo" + "'", str32, "DQo");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "DQo=" + "'", str33, "DQo=");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder2.setDecodingPolicy(codecPolicy7);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder2.setPadding((byte) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        byte[] byteArray4 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, true, true, (int) '#');
        org.apache.commons.codec.binary.randoop.Base64.Builder builder9 = builder2.setLineSeparator(byteArray8);
        org.apache.commons.codec.binary.randoop.Base64 base64_11 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_12 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray16, false);
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray18);
        java.lang.String str20 = base64_12.encodeToString(byteArray19);
        java.lang.String str21 = base64_11.encodeAsString(byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str23 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray22);
        java.lang.String str24 = base64_11.encodeToString(byteArray22);
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray29 = base64_11.encode(byteArray26, 1, 0);
        org.apache.commons.codec.binary.randoop.Base64 base64_31 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_32 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray38 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray36, false);
        byte[] byteArray39 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray38);
        java.lang.String str40 = base64_32.encodeToString(byteArray39);
        java.lang.String str41 = base64_31.encodeAsString(byteArray39);
        byte[] byteArray42 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str43 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray42);
        java.lang.String str44 = base64_31.encodeToString(byteArray42);
        boolean boolean45 = base64_31.isStrictDecoding();
        byte[] byteArray47 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("");
        byte[] byteArray50 = base64_31.encode(byteArray47, (int) 'a', (int) (byte) 100);
        org.apache.commons.codec.CodecPolicy codecPolicy51 = base64_31.getCodecPolicy();
        org.apache.commons.codec.binary.randoop.Base64 base64_52 = new org.apache.commons.codec.binary.randoop.Base64((int) ' ', byteArray26, true, codecPolicy51);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder53 = builder9.setDecodingPolicy(codecPolicy51);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "/woK" + "'", str20, "/woK");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/woK" + "'", str21, "/woK");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DQo" + "'", str23, "DQo");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DQo=" + "'", str24, "DQo=");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "/woK" + "'", str40, "/woK");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "/woK" + "'", str41, "/woK");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "DQo" + "'", str43, "DQo");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "DQo=" + "'", str44, "DQo=");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + codecPolicy51 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy51.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder6.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder8.setUrlSafe(true);
        org.apache.commons.codec.binary.randoop.Base64 base64_12 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 100);
        byte[] byteArray13 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray13);
        byte[] byteArray16 = base64_12.encode(byteArray15);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder17 = builder8.setLineSeparator(byteArray15);
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray15);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DQo" + "'", str14, "DQo");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[82, 70, 70, 118, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[13, 10]");
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = base64_0.encodeToString(byteArray7);
        boolean boolean9 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray7);
        boolean boolean10 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray7);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = base64_0.encodeToString(byteArray7);
        boolean boolean10 = base64_0.isInAlphabet("L3dvSw==\001\n\n\ufffd\ufffd\n");
        boolean boolean11 = base64_0.isUrlSafe();
        org.apache.commons.codec.binary.randoop.Base64 base64_12 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_13 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray17, false);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray19);
        java.lang.String str21 = base64_13.encodeToString(byteArray20);
        java.lang.String str22 = base64_12.encodeAsString(byteArray20);
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray23);
        byte[] byteArray25 = base64_12.decode(byteArray23);
        org.apache.commons.codec.binary.randoop.Base64 base64_26 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_27 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray33 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray31, false);
        byte[] byteArray34 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray33);
        java.lang.String str35 = base64_27.encodeToString(byteArray34);
        java.lang.String str36 = base64_26.encodeAsString(byteArray34);
        byte[] byteArray37 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str38 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray37);
        java.lang.String str39 = base64_26.encodeToString(byteArray37);
        byte[] byteArray41 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray44 = base64_26.encode(byteArray41, 1, 0);
        java.lang.String str45 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray44);
        java.lang.String str46 = base64_12.encodeToString(byteArray44);
        byte[] byteArray50 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray44, false, false, (int) (byte) 0);
        java.lang.String str51 = base64_0.encodeAsString(byteArray44);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/woK" + "'", str21, "/woK");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "/woK" + "'", str22, "/woK");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "/woK" + "'", str35, "/woK");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "/woK" + "'", str36, "/woK");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "DQo" + "'", str38, "DQo");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "DQo=" + "'", str39, "DQo=");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray0);
        byte[] byteArray5 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray0, false, true, (int) (short) -1);
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray0);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray6);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setPadding((byte) 0);
        org.apache.commons.codec.binary.randoop.Base64 base64_7 = builder2.get();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_16 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray15);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray22 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray20, false);
        boolean boolean24 = base64_16.isInAlphabet(byteArray22, true);
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray22, true);
        boolean boolean27 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray22);
        java.lang.Object obj28 = base64_7.decode((java.lang.Object) byteArray22);
        boolean boolean29 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray22);
        java.lang.String str30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray22);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "L3dvSw==" + "'", str30, "L3dvSw==");
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setPadding((byte) 0);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_15 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray14);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray19, false);
        boolean boolean23 = base64_15.isInAlphabet(byteArray21, true);
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray21, false, true);
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray21);
        byte[] byteArray30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray21, true, false);
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray30);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder32 = builder6.setEncodeTable(byteArray30);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder34 = builder32.setPadding((byte) 10);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder35 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy36 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder37 = builder35.setDecodingPolicy(codecPolicy36);
        byte[] byteArray39 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray43 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray39, true, true, (int) '#');
        org.apache.commons.codec.binary.randoop.Base64.Builder builder44 = builder37.setLineSeparator(byteArray43);
        byte[] byteArray45 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str46 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray45);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder48 = builder37.setEncodeTable(byteArray45);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder49 = builder32.setLineSeparator(byteArray45);
        byte[] byteArray51 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder52 = builder49.setEncodeTable(byteArray51);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "DQo" + "'", str46, "DQo");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[13, 10]");
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_2 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray6, false);
        byte[] byteArray9 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray8);
        java.lang.String str10 = base64_2.encodeToString(byteArray9);
        java.lang.String str11 = base64_1.encodeAsString(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str13 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str14 = base64_1.encodeToString(byteArray12);
        boolean boolean15 = base64_1.isStrictDecoding();
        byte[] byteArray17 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("");
        byte[] byteArray20 = base64_1.encode(byteArray17, (int) 'a', (int) (byte) 100);
        org.apache.commons.codec.binary.randoop.Base64 base64_22 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) 10, byteArray20, true);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder23 = org.apache.commons.codec.binary.randoop.Base64.builder();
        byte[] byteArray25 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray29 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray25, true, true, (int) '#');
        org.apache.commons.codec.binary.randoop.Base64.Builder builder30 = builder23.setLineSeparator(byteArray29);
        java.lang.Object obj31 = base64_22.decode((java.lang.Object) byteArray29);
        boolean boolean32 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray29);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/woK" + "'", str11, "/woK");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo" + "'", str13, "DQo");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DQo=" + "'", str14, "DQo=");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray11);
        byte[] byteArray13 = base64_0.decode(byteArray11);
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray13);
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray14);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(bigInteger15);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        byte[] byteArray4 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, true, true, (int) '#');
        org.apache.commons.codec.binary.randoop.Base64.Builder builder9 = builder2.setLineSeparator(byteArray8);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder11 = builder9.setLineLength(0);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder13 = builder9.setLineLength(0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str13 = base64_0.encodeToString(byteArray11);
        org.apache.commons.codec.binary.randoop.Base64 base64_14 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray18, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray20);
        java.lang.String str22 = base64_14.encodeToString(byteArray21);
        byte[] byteArray23 = base64_0.decode(byteArray21);
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray21, false, true, (int) (short) 10);
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray27);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DQo" + "'", str12, "DQo");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo=" + "'", str13, "DQo=");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "/woK" + "'", str22, "/woK");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[95, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[88, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray19 = base64_8.decode(byteArray18);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_28 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray27);
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_37 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray36);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray43 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray41, false);
        boolean boolean45 = base64_37.isInAlphabet(byteArray43, true);
        byte[] byteArray48 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray43, false, true);
        byte[] byteArray49 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray43);
        java.lang.String str50 = base64_28.encodeAsString(byteArray43);
        byte[] byteArray51 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray43);
        byte[] byteArray55 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray51, true, true, (int) ' ');
        java.lang.String str56 = base64_8.encodeToString(byteArray51);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder57 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy58 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder59 = builder57.setDecodingPolicy(codecPolicy58);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder61 = builder59.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy62 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder63 = builder59.setDecodingPolicy(codecPolicy62);
        org.apache.commons.codec.CodecPolicy codecPolicy64 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder65 = builder59.setDecodingPolicy(codecPolicy64);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder67 = builder65.setUrlSafe(false);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_76 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray75);
        byte[] byteArray77 = null;
        byte[] byteArray80 = base64_76.encode(byteArray77, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_81 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray85 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray87 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray85, false);
        byte[] byteArray88 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray87);
        java.lang.String str89 = base64_81.encodeToString(byteArray88);
        byte[] byteArray90 = base64_76.encode(byteArray88);
        java.lang.String str91 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray88);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder92 = builder65.setLineSeparator(byteArray88);
        java.lang.Object obj93 = base64_8.decode((java.lang.Object) byteArray88);
        boolean boolean94 = base64_8.isStrictDecoding();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str50, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 13, 10]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0NCg==\001\n\n\ufffd\ufffd\n" + "'", str56, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0NCg==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray80);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "/woK" + "'", str89, "/woK");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "_woK" + "'", str91, "_woK");
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(obj93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setPadding((byte) 0);
        org.apache.commons.codec.binary.randoop.Base64 base64_7 = builder2.get();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_16 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray15);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray22 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray20, false);
        boolean boolean24 = base64_16.isInAlphabet(byteArray22, true);
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray22, true);
        boolean boolean27 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray22);
        java.lang.Object obj28 = base64_7.decode((java.lang.Object) byteArray22);
        boolean boolean29 = base64_7.isStrictDecoding();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray10, false);
        byte[] byteArray13 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray12);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder14 = builder6.setEncodeTable(byteArray12);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder16 = builder6.setLineLength((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_17 = builder6.get();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: encodeTable must have exactly 64 entries.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setPadding((byte) 0);
        org.apache.commons.codec.binary.randoop.Base64 base64_7 = builder2.get();
        byte[] byteArray9 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AQoK//8K");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder2.setEncodeTable(byteArray9);
        java.lang.Class<?> wildcardClass11 = byteArray9.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray6);
        boolean boolean9 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray8);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_20 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray19);
        byte[] byteArray21 = null;
        byte[] byteArray24 = base64_20.encode(byteArray21, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_25 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray29, false);
        byte[] byteArray32 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray31);
        java.lang.String str33 = base64_25.encodeToString(byteArray32);
        byte[] byteArray34 = base64_20.encode(byteArray32);
        byte[] byteArray38 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray40 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray38, false);
        byte[] byteArray41 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray40);
        java.lang.String str42 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray40);
        byte[] byteArray43 = base64_20.decode(byteArray40);
        org.apache.commons.codec.CodecPolicy codecPolicy44 = base64_20.getCodecPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_45 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) -1, byteArray10, false, codecPolicy44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [TDNkdlN3PT0=??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "/woK" + "'", str33, "/woK");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "L3dvSw" + "'", str42, "L3dvSw");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 10, 10]");
        org.junit.Assert.assertTrue("'" + codecPolicy44 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy44.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = base64_0.encodeToString(byteArray7);
        byte[] byteArray10 = base64_0.decode("");
        boolean boolean12 = base64_0.isInAlphabet("AQoK//8K");
        byte[] byteArray13 = null;
        java.lang.String str14 = base64_0.encodeToString(byteArray13);
        boolean boolean16 = base64_0.isInAlphabet("TDNkdlN3\r\n");
        byte[] byteArray18 = base64_0.decode("AAoKCgoB");
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray18);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[65, 65, 111, 75, 67, 103, 111, 66]");
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        long long7 = base64_0.getEncodedLength(byteArray2);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_16 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray15);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray22 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray20, false);
        boolean boolean24 = base64_16.isInAlphabet(byteArray22, true);
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray22, true, false);
        byte[] byteArray28 = base64_0.encode(byteArray22);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray34 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray32, false);
        byte[] byteArray35 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray34);
        boolean boolean37 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray36);
        java.lang.Object obj39 = base64_0.decode((java.lang.Object) byteArray38);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_48 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray47);
        byte[] byteArray52 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray54 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray52, false);
        boolean boolean56 = base64_48.isInAlphabet(byteArray54, true);
        byte[] byteArray58 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray59 = base64_48.decode(byteArray58);
        org.apache.commons.codec.binary.randoop.Base64 base64_60 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_61 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray65 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray67 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray65, false);
        byte[] byteArray68 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray67);
        java.lang.String str69 = base64_61.encodeToString(byteArray68);
        java.lang.String str70 = base64_60.encodeAsString(byteArray68);
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_79 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray78);
        byte[] byteArray83 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray85 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray83, false);
        boolean boolean87 = base64_79.isInAlphabet(byteArray85, true);
        byte[] byteArray90 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray85, false, true);
        byte[] byteArray91 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray85);
        byte[] byteArray94 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray85, true, false);
        java.math.BigInteger bigInteger95 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray94);
        byte[] byteArray96 = base64_60.encode(byteArray94);
        java.lang.Object obj97 = base64_48.encode((java.lang.Object) byteArray96);
        java.lang.String str98 = base64_0.encodeAsString(byteArray96);
        byte[] byteArray99 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray96);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4L + "'", long7 == 4L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "/woK" + "'", str69, "/woK");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "/woK" + "'", str70, "/woK");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger95);
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "VEROa2RsTjNQVDBOQ2c9PQ==" + "'", str98, "VEROa2RsTjNQVDBOQ2c9PQ==");
        org.junit.Assert.assertNotNull(byteArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray99), "[86, 69, 82, 79, 97, 50, 82, 115, 84, 106, 78, 81, 86, 68, 66, 79, 81, 50, 99, 57, 80, 81]");
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("/woK");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj20 = base64_8.encode((java.lang.Object) (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.randoop.Base64 base64_7 = builder2.get();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_16 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray15);
        byte[] byteArray17 = null;
        byte[] byteArray20 = base64_16.encode(byteArray17, 100, 76);
        boolean boolean21 = base64_16.isStrictDecoding();
        org.apache.commons.codec.binary.randoop.Base64 base64_22 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray24, true, true, (int) '#');
        long long29 = base64_22.getEncodedLength(byteArray24);
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_38 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray37);
        byte[] byteArray42 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray44 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray42, false);
        boolean boolean46 = base64_38.isInAlphabet(byteArray44, true);
        byte[] byteArray49 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray44, true, false);
        byte[] byteArray50 = base64_22.encode(byteArray44);
        java.lang.String str51 = base64_16.encodeToString(byteArray50);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder52 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy53 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder54 = builder52.setDecodingPolicy(codecPolicy53);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder56 = builder54.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy57 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder58 = builder54.setDecodingPolicy(codecPolicy57);
        org.apache.commons.codec.CodecPolicy codecPolicy59 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder60 = builder54.setDecodingPolicy(codecPolicy59);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder62 = builder60.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64 base64_63 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_64 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray68 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray70 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray68, false);
        byte[] byteArray71 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray70);
        java.lang.String str72 = base64_64.encodeToString(byteArray71);
        java.lang.String str73 = base64_63.encodeAsString(byteArray71);
        byte[] byteArray74 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray75 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray74);
        byte[] byteArray76 = base64_63.decode(byteArray74);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder77 = builder60.setEncodeTable(byteArray74);
        boolean boolean79 = base64_16.isInAlphabet(byteArray74, false);
        byte[] byteArray80 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray74);
        byte[] byteArray84 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray80, true, true, (int) (byte) 10);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder85 = builder2.setLineSeparator(byteArray84);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 4L + "'", long29 == 4L);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n" + "'", str51, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "/woK" + "'", str72, "/woK");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "/woK" + "'", str73, "/woK");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        byte[] byteArray11 = base64_1.decode("");
        boolean boolean13 = base64_1.isInAlphabet("AQoK//8K");
        byte[] byteArray14 = null;
        java.lang.String str15 = base64_1.encodeToString(byteArray14);
        org.apache.commons.codec.binary.randoop.Base64 base64_16 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_17 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray21, false);
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray23);
        java.lang.String str25 = base64_17.encodeToString(byteArray24);
        java.lang.String str26 = base64_16.encodeAsString(byteArray24);
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray27);
        byte[] byteArray29 = base64_16.decode(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray29);
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray30);
        java.lang.String str32 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray30);
        byte[] byteArray35 = base64_1.encode(byteArray30, 76, (int) (byte) 10);
        org.apache.commons.codec.binary.randoop.Base64 base64_36 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) -1, byteArray35);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "/woK" + "'", str25, "/woK");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "/woK" + "'", str26, "/woK");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        boolean boolean1 = org.apache.commons.codec.binary.randoop.Base64.isBase64((byte) -1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        byte[] byteArray4 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, true, true, (int) '#');
        org.apache.commons.codec.binary.randoop.Base64.Builder builder9 = builder2.setLineSeparator(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str11 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray10);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder13 = builder9.setLineSeparator(byteArray12);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_22 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray21);
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray26, false);
        boolean boolean30 = base64_22.isInAlphabet(byteArray28, true);
        byte[] byteArray32 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray33 = base64_22.decode(byteArray32);
        byte[] byteArray36 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray32, false, true);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder37 = builder13.setEncodeTable(byteArray36);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DQo" + "'", str11, "DQo");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[65, 65, 111, 75, 67, 103, 111, 66]");
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_2 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray6, false);
        byte[] byteArray9 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray8);
        java.lang.String str10 = base64_2.encodeToString(byteArray9);
        java.lang.String str11 = base64_1.encodeAsString(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str13 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str14 = base64_1.encodeToString(byteArray12);
        byte[] byteArray16 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray19 = base64_1.encode(byteArray16, 1, 0);
        byte[] byteArray22 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray19, false, true);
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray19);
        org.apache.commons.codec.binary.randoop.Base64 base64_25 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray19, false);
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray19);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/woK" + "'", str11, "/woK");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo" + "'", str13, "DQo");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DQo=" + "'", str14, "DQo=");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("/woK");
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray19);
        boolean boolean23 = base64_8.isInAlphabet(byteArray21, true);
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str25 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray24);
        java.lang.String str27 = base64_8.encodeAsString(byteArray26);
        org.apache.commons.codec.CodecPolicy codecPolicy28 = base64_8.getCodecPolicy();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DQo" + "'", str20, "DQo");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DQo" + "'", str25, "DQo");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[68, 81, 111, 61]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "RFFvPQ==\001\n\n\ufffd\ufffd\n" + "'", str27, "RFFvPQ==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertTrue("'" + codecPolicy28 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy28.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 10);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder1 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy2 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder3 = builder1.setDecodingPolicy(codecPolicy2);
        byte[] byteArray5 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray9 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, true, true, (int) '#');
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder3.setLineSeparator(byteArray9);
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_21 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray20);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray25, false);
        boolean boolean29 = base64_21.isInAlphabet(byteArray27, true);
        byte[] byteArray31 = base64_21.decode("DQo");
        org.apache.commons.codec.binary.randoop.Base64 base64_32 = new org.apache.commons.codec.binary.randoop.Base64((-1), byteArray31);
        org.apache.commons.codec.CodecPolicy codecPolicy33 = base64_32.getCodecPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_34 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) 1, byteArray9, false, codecPolicy33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [DQo??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[13, 10]");
        org.junit.Assert.assertTrue("'" + codecPolicy33 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy33.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        org.apache.commons.codec.binary.randoop.Base64 base64_2 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 100);
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_11 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray10);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_20 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray19);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray24, false);
        boolean boolean28 = base64_20.isInAlphabet(byteArray26, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray26, false, true);
        byte[] byteArray32 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray26);
        java.lang.String str33 = base64_11.encodeAsString(byteArray26);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_42 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray41);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray48 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray46, false);
        boolean boolean50 = base64_42.isInAlphabet(byteArray48, true);
        byte[] byteArray52 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray53 = base64_42.decode(byteArray52);
        java.lang.String str54 = base64_11.encodeAsString(byteArray53);
        java.lang.String str55 = base64_2.encodeAsString(byteArray53);
        java.math.BigInteger bigInteger56 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray53);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder58 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy59 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder60 = builder58.setDecodingPolicy(codecPolicy59);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder62 = builder60.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy63 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder64 = builder60.setDecodingPolicy(codecPolicy63);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_73 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray72);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_82 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray81);
        byte[] byteArray86 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray88 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray86, false);
        boolean boolean90 = base64_82.isInAlphabet(byteArray88, true);
        byte[] byteArray93 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray88, false, true);
        byte[] byteArray94 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray88);
        java.lang.String str95 = base64_73.encodeAsString(byteArray88);
        org.apache.commons.codec.CodecPolicy codecPolicy96 = base64_73.getCodecPolicy();
        org.apache.commons.codec.binary.randoop.Base64.Builder builder97 = builder60.setDecodingPolicy(codecPolicy96);
        org.apache.commons.codec.binary.randoop.Base64 base64_98 = new org.apache.commons.codec.binary.randoop.Base64(76, byteArray53, false, codecPolicy96);
        boolean boolean99 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray53);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str33, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(bigInteger56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str95, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertTrue("'" + codecPolicy96 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy96.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = base64_0.encodeToString(byteArray7);
        byte[] byteArray10 = base64_0.decode("");
        boolean boolean12 = base64_0.isInAlphabet("AQoK//8K");
        byte[] byteArray13 = null;
        java.lang.String str14 = base64_0.encodeToString(byteArray13);
        boolean boolean16 = base64_0.isInAlphabet("TDNkdlN3\r\n");
        byte[] byteArray18 = base64_0.decode("AAoKCgoB");
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str26 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray25);
        byte[] byteArray27 = base64_0.encode(byteArray25);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AAoKCgoB" + "'", str26, "AAoKCgoB");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[65, 65, 111, 75, 67, 103, 111, 66]");
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        byte[] byteArray4 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, true, true, (int) '#');
        org.apache.commons.codec.binary.randoop.Base64.Builder builder9 = builder2.setLineSeparator(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str11 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray10);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder13 = builder2.setEncodeTable(byteArray10);
        java.lang.Class<?> wildcardClass14 = builder13.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DQo" + "'", str11, "DQo");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = base64_0.encodeToString(byteArray7);
        byte[] byteArray10 = base64_0.decode("");
        boolean boolean12 = base64_0.isInAlphabet("AQoK//8K");
        byte[] byteArray13 = null;
        java.lang.String str14 = base64_0.encodeToString(byteArray13);
        org.apache.commons.codec.binary.randoop.Base64 base64_15 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_16 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray22 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray20, false);
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray22);
        java.lang.String str24 = base64_16.encodeToString(byteArray23);
        java.lang.String str25 = base64_15.encodeAsString(byteArray23);
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray26);
        byte[] byteArray28 = base64_15.decode(byteArray26);
        byte[] byteArray29 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray29);
        java.lang.String str31 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray29);
        byte[] byteArray34 = base64_0.encode(byteArray29, 76, (int) (byte) 10);
        java.lang.Class<?> wildcardClass35 = byteArray34.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "/woK" + "'", str24, "/woK");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "/woK" + "'", str25, "/woK");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder6.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder6.setLineLength(0);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder12 = builder10.setUrlSafe(true);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder14 = builder12.setLineLength(100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_2 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray6, false);
        byte[] byteArray9 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray8);
        java.lang.String str10 = base64_2.encodeToString(byteArray9);
        java.lang.String str11 = base64_1.encodeAsString(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray13 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray12);
        byte[] byteArray14 = base64_1.decode(byteArray12);
        org.apache.commons.codec.binary.randoop.Base64 base64_16 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) 1, byteArray14, false);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray17);
        byte[] byteArray22 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray17, false, true, (int) (short) -1);
        byte[] byteArray25 = base64_16.encode(byteArray22, (int) (short) 10, 64);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/woK" + "'", str11, "/woK");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        byte[] byteArray1 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str2 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray1);
        byte[] byteArray3 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray1);
        org.apache.commons.codec.binary.randoop.Base64 base64_4 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) 1, byteArray3);
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray10 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray6, true, true, (int) '#');
        byte[] byteArray13 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray10, true, true);
        long long14 = base64_4.getEncodedLength(byteArray13);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "DQo" + "'", str2, "DQo");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[82, 70, 70, 118, 68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 12L + "'", long14 == 12L);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        org.apache.commons.codec.binary.randoop.Base64.Builder builder7 = builder0.setLineSeparator(byteArray6);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy9 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder8.setDecodingPolicy(codecPolicy9);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder12 = builder10.setPadding((byte) 1);
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_21 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray20);
        byte[] byteArray22 = null;
        byte[] byteArray25 = base64_21.encode(byteArray22, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_26 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray32 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray30, false);
        byte[] byteArray33 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray32);
        java.lang.String str34 = base64_26.encodeToString(byteArray33);
        byte[] byteArray35 = base64_21.encode(byteArray33);
        byte[] byteArray36 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray35);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder37 = builder12.setLineSeparator(byteArray36);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder38 = builder0.setEncodeTable(byteArray36);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder40 = builder38.setUrlSafe(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "/woK" + "'", str34, "/woK");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray10 = null;
        byte[] byteArray13 = base64_9.encode(byteArray10, 100, 76);
        boolean boolean14 = base64_9.isStrictDecoding();
        org.apache.commons.codec.binary.randoop.Base64 base64_15 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray17 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray17, true, true, (int) '#');
        long long22 = base64_15.getEncodedLength(byteArray17);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_31 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray30);
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray37 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray35, false);
        boolean boolean39 = base64_31.isInAlphabet(byteArray37, true);
        byte[] byteArray42 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray37, true, false);
        byte[] byteArray43 = base64_15.encode(byteArray37);
        java.lang.String str44 = base64_9.encodeToString(byteArray43);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder45 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy46 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder47 = builder45.setDecodingPolicy(codecPolicy46);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder49 = builder47.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy50 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder51 = builder47.setDecodingPolicy(codecPolicy50);
        org.apache.commons.codec.CodecPolicy codecPolicy52 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder53 = builder47.setDecodingPolicy(codecPolicy52);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder55 = builder53.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64 base64_56 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_57 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray61 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray63 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray61, false);
        byte[] byteArray64 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray63);
        java.lang.String str65 = base64_57.encodeToString(byteArray64);
        java.lang.String str66 = base64_56.encodeAsString(byteArray64);
        byte[] byteArray67 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray68 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray67);
        byte[] byteArray69 = base64_56.decode(byteArray67);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder70 = builder53.setEncodeTable(byteArray67);
        boolean boolean72 = base64_9.isInAlphabet(byteArray67, false);
        byte[] byteArray73 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray67);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_83 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray82);
        byte[] byteArray87 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray89 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray87, false);
        boolean boolean91 = base64_83.isInAlphabet(byteArray89, true);
        org.apache.commons.codec.CodecPolicy codecPolicy92 = base64_83.getCodecPolicy();
        org.apache.commons.codec.binary.randoop.Base64 base64_93 = new org.apache.commons.codec.binary.randoop.Base64((int) 'a', byteArray73, true, codecPolicy92);
        boolean boolean94 = base64_93.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 4L + "'", long22 == 4L);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n" + "'", str44, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "/woK" + "'", str65, "/woK");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "/woK" + "'", str66, "/woK");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + codecPolicy92 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy92.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        boolean boolean13 = base64_8.isStrictDecoding();
        org.apache.commons.codec.binary.randoop.Base64 base64_14 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray16 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray16, true, true, (int) '#');
        long long21 = base64_14.getEncodedLength(byteArray16);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_30 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray29);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray36 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray34, false);
        boolean boolean38 = base64_30.isInAlphabet(byteArray36, true);
        byte[] byteArray41 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray36, true, false);
        byte[] byteArray42 = base64_14.encode(byteArray36);
        java.lang.String str43 = base64_8.encodeToString(byteArray42);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder44 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy45 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder46 = builder44.setDecodingPolicy(codecPolicy45);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder48 = builder46.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy49 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder50 = builder46.setDecodingPolicy(codecPolicy49);
        org.apache.commons.codec.CodecPolicy codecPolicy51 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder52 = builder46.setDecodingPolicy(codecPolicy51);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder54 = builder52.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64 base64_55 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_56 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray60 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray62 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray60, false);
        byte[] byteArray63 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray62);
        java.lang.String str64 = base64_56.encodeToString(byteArray63);
        java.lang.String str65 = base64_55.encodeAsString(byteArray63);
        byte[] byteArray66 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray67 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray66);
        byte[] byteArray68 = base64_55.decode(byteArray66);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder69 = builder52.setEncodeTable(byteArray66);
        boolean boolean71 = base64_8.isInAlphabet(byteArray66, false);
        boolean boolean72 = base64_8.isUrlSafe();
        org.apache.commons.codec.CodecPolicy codecPolicy73 = base64_8.getCodecPolicy();
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_82 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray81);
        byte[] byteArray86 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray88 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray86, false);
        boolean boolean90 = base64_82.isInAlphabet(byteArray88, true);
        byte[] byteArray92 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray88, true);
        boolean boolean93 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray88);
        java.lang.String str94 = base64_8.encodeToString(byteArray88);
        byte[] byteArray96 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray88, true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4L + "'", long21 == 4L);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n" + "'", str43, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "/woK" + "'", str64, "/woK");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "/woK" + "'", str65, "/woK");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy73 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy73.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str94, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        byte[] byteArray4 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, true, true, (int) '#');
        org.apache.commons.codec.binary.randoop.Base64.Builder builder9 = builder2.setLineSeparator(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str11 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray10);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder13 = builder2.setEncodeTable(byteArray10);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder15 = builder13.setPadding((byte) 0);
        java.lang.Class<?> wildcardClass16 = builder15.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DQo" + "'", str11, "DQo");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        long long7 = base64_0.getEncodedLength(byteArray2);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_16 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray15);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray22 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray20, false);
        boolean boolean24 = base64_16.isInAlphabet(byteArray22, true);
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray22, true, false);
        byte[] byteArray28 = base64_0.encode(byteArray22);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray34 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray32, false);
        byte[] byteArray35 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray34);
        boolean boolean37 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray36);
        java.lang.Object obj39 = base64_0.decode((java.lang.Object) byteArray38);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_48 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray47);
        byte[] byteArray49 = null;
        byte[] byteArray52 = base64_48.encode(byteArray49, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_53 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray57 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray59 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray57, false);
        byte[] byteArray60 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray59);
        java.lang.String str61 = base64_53.encodeToString(byteArray60);
        byte[] byteArray62 = base64_48.encode(byteArray60);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_71 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray70);
        byte[] byteArray75 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray77 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray75, false);
        boolean boolean79 = base64_71.isInAlphabet(byteArray77, true);
        byte[] byteArray81 = base64_71.decode("/woK");
        byte[] byteArray82 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str83 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray82);
        byte[] byteArray84 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray82);
        boolean boolean86 = base64_71.isInAlphabet(byteArray84, true);
        byte[] byteArray87 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str88 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray87);
        byte[] byteArray89 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray87);
        java.lang.String str90 = base64_71.encodeAsString(byteArray89);
        boolean boolean92 = base64_48.isInAlphabet(byteArray89, true);
        byte[] byteArray93 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray89);
        byte[] byteArray94 = base64_0.decode(byteArray93);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4L + "'", long7 == 4L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray52);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "/woK" + "'", str61, "/woK");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "DQo" + "'", str83, "DQo");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "DQo" + "'", str88, "DQo");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[68, 81, 111, 61]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "RFFvPQ==\001\n\n\ufffd\ufffd\n" + "'", str90, "RFFvPQ==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("/woK");
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray19);
        boolean boolean23 = base64_8.isInAlphabet(byteArray21, true);
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray21, false, false, (int) ' ');
        java.lang.String str28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray21);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DQo" + "'", str20, "DQo");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("DQo");
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray19);
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray19, false, true, (int) (short) -1);
        byte[] byteArray25 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray19);
        byte[] byteArray26 = base64_8.decode(byteArray19);
        boolean boolean27 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray19);
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray19);
        byte[] byteArray30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray28, true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_10 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray9);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray16 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, false);
        boolean boolean18 = base64_10.isInAlphabet(byteArray16, true);
        byte[] byteArray20 = base64_10.decode("DQo");
        org.apache.commons.codec.binary.randoop.Base64 base64_21 = new org.apache.commons.codec.binary.randoop.Base64((-1), byteArray20);
        boolean boolean22 = base64_21.isUrlSafe();
        byte[] byteArray24 = base64_21.decode("AQoK//8K\001\n\n\ufffd\ufffd\n");
        boolean boolean25 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray24);
        org.apache.commons.codec.binary.randoop.Base64 base64_26 = new org.apache.commons.codec.binary.randoop.Base64((int) 'a', byteArray24);
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray32 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray30, false);
        byte[] byteArray33 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray32);
        boolean boolean35 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray34);
        byte[] byteArray36 = base64_26.decode(byteArray34);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[13, 10]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 75]");
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray19 = base64_9.decode("DQo");
        org.apache.commons.codec.binary.randoop.Base64 base64_20 = new org.apache.commons.codec.binary.randoop.Base64((-1), byteArray19);
        org.apache.commons.codec.binary.randoop.Base64 base64_21 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_22 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray26, false);
        byte[] byteArray29 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray28);
        java.lang.String str30 = base64_22.encodeToString(byteArray29);
        java.lang.String str31 = base64_21.encodeAsString(byteArray29);
        byte[] byteArray32 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str33 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray32);
        java.lang.String str34 = base64_21.encodeToString(byteArray32);
        byte[] byteArray37 = base64_20.encode(byteArray32, (int) (short) 100, 0);
        boolean boolean38 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray37);
        byte[] byteArray39 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray37);
        boolean boolean40 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray37);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/woK" + "'", str30, "/woK");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "/woK" + "'", str31, "/woK");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "DQo" + "'", str33, "DQo");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "DQo=" + "'", str34, "DQo=");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder2.setUrlSafe(true);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_17 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray16);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray21, false);
        boolean boolean25 = base64_17.isInAlphabet(byteArray23, true);
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray28 = base64_17.decode(byteArray27);
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray27, false, true);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder32 = builder2.setEncodeTable(byteArray27);
        org.apache.commons.codec.binary.randoop.Base64 base64_34 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy35 = base64_34.getCodecPolicy();
        org.apache.commons.codec.binary.randoop.Base64.Builder builder36 = builder2.setDecodingPolicy(codecPolicy35);
        org.apache.commons.codec.binary.randoop.Base64 base64_38 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_39 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray45 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray43, false);
        byte[] byteArray46 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray45);
        java.lang.String str47 = base64_39.encodeToString(byteArray46);
        java.lang.String str48 = base64_38.encodeAsString(byteArray46);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_58 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray57);
        byte[] byteArray62 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray64 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray62, false);
        boolean boolean66 = base64_58.isInAlphabet(byteArray64, true);
        org.apache.commons.codec.CodecPolicy codecPolicy67 = base64_58.getCodecPolicy();
        org.apache.commons.codec.binary.randoop.Base64 base64_68 = new org.apache.commons.codec.binary.randoop.Base64((int) 'a', byteArray46, false, codecPolicy67);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder69 = builder2.setEncodeTable(byteArray46);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[65, 65, 111, 75, 67, 103, 111, 66]");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + codecPolicy35 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy35.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "/woK" + "'", str47, "/woK");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "/woK" + "'", str48, "/woK");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + codecPolicy67 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy67.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        byte[] byteArray1 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("L3dvSw==");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[47, 119, 111, 75]");
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, false, true);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray14);
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, true, false);
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray23);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        byte[] byteArray1 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray5 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray1, true, true, (int) '#');
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[82, 70, 70, 118, 68, 81, 111, 61, 13, 10]");
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = base64_0.encodeToString(byteArray7);
        byte[] byteArray10 = base64_0.decode("");
        boolean boolean11 = base64_0.isStrictDecoding();
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray17 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray15, false);
        java.lang.String str18 = base64_0.encodeToString(byteArray15);
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray15);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[47, 119, 111, 75]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "/woK" + "'", str18, "/woK");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[95, 119, 111, 75]");
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = base64_0.encodeToString(byteArray7);
        byte[] byteArray10 = base64_0.decode("");
        boolean boolean12 = base64_0.isInAlphabet("AQoK//8K");
        byte[] byteArray13 = null;
        java.lang.String str14 = base64_0.encodeToString(byteArray13);
        boolean boolean16 = base64_0.isInAlphabet("TDNkdlN3\r\n");
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_25 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray24);
        byte[] byteArray26 = null;
        byte[] byteArray29 = base64_25.encode(byteArray26, 100, 76);
        boolean boolean30 = base64_25.isStrictDecoding();
        org.apache.commons.codec.binary.randoop.Base64 base64_31 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray33 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray37 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray33, true, true, (int) '#');
        long long38 = base64_31.getEncodedLength(byteArray33);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_47 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray46);
        byte[] byteArray51 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray53 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray51, false);
        boolean boolean55 = base64_47.isInAlphabet(byteArray53, true);
        byte[] byteArray58 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray53, true, false);
        byte[] byteArray59 = base64_31.encode(byteArray53);
        java.lang.String str60 = base64_25.encodeToString(byteArray59);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder61 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy62 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder63 = builder61.setDecodingPolicy(codecPolicy62);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder65 = builder63.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder67 = builder63.setPadding((byte) 0);
        org.apache.commons.codec.binary.randoop.Base64 base64_68 = builder63.get();
        byte[] byteArray70 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AQoK//8K");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder71 = builder63.setEncodeTable(byteArray70);
        byte[] byteArray72 = base64_25.encode(byteArray70);
        byte[] byteArray73 = base64_0.decode(byteArray70);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 4L + "'", long38 == 4L);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n" + "'", str60, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(base64_68);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[65, 81, 111, 75, 47, 47, 56, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray10 = null;
        byte[] byteArray13 = base64_9.encode(byteArray10, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_14 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray18, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray20);
        java.lang.String str22 = base64_14.encodeToString(byteArray21);
        byte[] byteArray23 = base64_9.encode(byteArray21);
        org.apache.commons.codec.binary.randoop.Base64 base64_24 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 100, byteArray21);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_33 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray32);
        byte[] byteArray35 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray32, true);
        java.lang.String str36 = base64_24.encodeAsString(byteArray32);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "/woK" + "'", str22, "/woK");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[65, 81, 111, 75, 47, 47, 56, 75, 13, 10]");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ufffd\n\n" + "'", str36, "\ufffd\n\n");
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray5 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray3, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray3, true, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.randoop.Base64.encodeInteger(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 75, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 119, 111, 75]");
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        byte[] byteArray4 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, true, true, (int) '#');
        org.apache.commons.codec.binary.randoop.Base64.Builder builder9 = builder2.setLineSeparator(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str11 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray10);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder13 = builder2.setEncodeTable(byteArray10);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_22 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray21);
        byte[] byteArray23 = null;
        byte[] byteArray26 = base64_22.encode(byteArray23, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_27 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray33 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray31, false);
        byte[] byteArray34 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray33);
        java.lang.String str35 = base64_27.encodeToString(byteArray34);
        byte[] byteArray36 = base64_22.encode(byteArray34);
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray42 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray40, false);
        byte[] byteArray43 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray42);
        java.lang.String str44 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray42);
        byte[] byteArray45 = base64_22.decode(byteArray42);
        org.apache.commons.codec.CodecPolicy codecPolicy46 = base64_22.getCodecPolicy();
        org.apache.commons.codec.binary.randoop.Base64.Builder builder47 = builder2.setDecodingPolicy(codecPolicy46);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DQo" + "'", str11, "DQo");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "/woK" + "'", str35, "/woK");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "L3dvSw" + "'", str44, "L3dvSw");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 10, 10]");
        org.junit.Assert.assertTrue("'" + codecPolicy46 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy46.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder6.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder8.setUrlSafe(true);
        org.apache.commons.codec.binary.randoop.Base64 base64_12 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 100);
        byte[] byteArray13 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray13);
        byte[] byteArray16 = base64_12.encode(byteArray15);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder17 = builder8.setLineSeparator(byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_18 = builder17.get();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [DQo=]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DQo" + "'", str14, "DQo");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[82, 70, 70, 118, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64((int) '#');
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_10 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray9);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray16 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, false);
        boolean boolean18 = base64_10.isInAlphabet(byteArray16, true);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray21 = base64_10.decode(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray20);
        byte[] byteArray23 = base64_1.decode(byteArray20);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[65, 65, 111, 75, 67, 103, 111, 66]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray5 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray3, false);
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5);
        boolean boolean8 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray7);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.Base64.encodeInteger(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.Base64.encodeInteger(bigInteger10);
        byte[] byteArray13 = org.apache.commons.codec.binary.randoop.Base64.encodeInteger(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 61]");
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        byte[] byteArray0 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str1 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray0);
        byte[] byteArray5 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray0, false, false, (int) (byte) 10);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DQo" + "'", str1, "DQo");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[68, 81, 111, 61]");
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        byte[] byteArray0 = null;
        byte[] byteArray4 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray0, true, true, (int) '4');
        org.junit.Assert.assertNull(byteArray4);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = base64_0.encodeToString(byteArray7);
        byte[] byteArray10 = base64_0.decode("");
        boolean boolean11 = base64_0.isStrictDecoding();
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray17 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray15, false);
        java.lang.String str18 = base64_0.encodeToString(byteArray15);
        java.lang.Class<?> wildcardClass19 = byteArray15.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[47, 119, 111, 75]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "/woK" + "'", str18, "/woK");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder6.setUrlSafe(false);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_17 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray16);
        byte[] byteArray18 = null;
        byte[] byteArray21 = base64_17.encode(byteArray18, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_22 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray26, false);
        byte[] byteArray29 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray28);
        java.lang.String str30 = base64_22.encodeToString(byteArray29);
        byte[] byteArray31 = base64_17.encode(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray37 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray35, false);
        byte[] byteArray38 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray37);
        java.lang.String str39 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray40 = base64_17.decode(byteArray37);
        byte[] byteArray43 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray40, true, false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder44 = builder6.setEncodeTable(byteArray40);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/woK" + "'", str30, "/woK");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "L3dvSw" + "'", str39, "L3dvSw");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[47, 119, 111, 75, 13, 10]");
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, true);
        boolean boolean19 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray14);
        boolean boolean20 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray14);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str13 = base64_0.encodeToString(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray18 = base64_0.encode(byteArray15, 1, 0);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray22, false);
        long long25 = base64_0.getEncodedLength(byteArray24);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_35 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray34);
        byte[] byteArray39 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray41 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray39, false);
        boolean boolean43 = base64_35.isInAlphabet(byteArray41, true);
        byte[] byteArray45 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray46 = base64_35.decode(byteArray45);
        org.apache.commons.codec.binary.randoop.Base64 base64_47 = new org.apache.commons.codec.binary.randoop.Base64((int) '4', byteArray45);
        byte[] byteArray48 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray49 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray48);
        byte[] byteArray50 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray48);
        java.lang.String str51 = base64_47.encodeToString(byteArray48);
        org.apache.commons.codec.binary.randoop.Base64 base64_53 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 100);
        byte[] byteArray54 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str55 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray54);
        byte[] byteArray56 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray54);
        byte[] byteArray57 = base64_53.encode(byteArray56);
        boolean boolean59 = base64_47.isInAlphabet(byteArray56, false);
        java.lang.String str60 = base64_0.encodeAsString(byteArray56);
        byte[] byteArray61 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray56);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DQo" + "'", str12, "DQo");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo=" + "'", str13, "DQo=");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 8L + "'", long25 == 8L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[68, 81, 111, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "DQo=\000\n\n\n\n\001" + "'", str51, "DQo=\000\n\n\n\n\001");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "DQo" + "'", str55, "DQo");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[82, 70, 70, 118, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "RFFvPQ==" + "'", str60, "RFFvPQ==");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[82, 70, 70, 118, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str13 = base64_0.encodeToString(byteArray11);
        boolean boolean14 = base64_0.isStrictDecoding();
        byte[] byteArray16 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("");
        byte[] byteArray19 = base64_0.encode(byteArray16, (int) 'a', (int) (byte) 100);
        boolean boolean20 = base64_0.isStrictDecoding();
        boolean boolean22 = base64_0.isInAlphabet("/woK");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DQo" + "'", str12, "DQo");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo=" + "'", str13, "DQo=");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray10, false);
        byte[] byteArray13 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray12);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder14 = builder6.setEncodeTable(byteArray12);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder16 = builder14.setUrlSafe(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder2.setDecodingPolicy(codecPolicy7);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder8.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64 base64_11 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_12 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray16, false);
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray18);
        java.lang.String str20 = base64_12.encodeToString(byteArray19);
        java.lang.String str21 = base64_11.encodeAsString(byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray22);
        byte[] byteArray24 = base64_11.decode(byteArray22);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder25 = builder8.setEncodeTable(byteArray22);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_26 = builder8.get();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: encodeTable must have exactly 64 entries.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "/woK" + "'", str20, "/woK");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/woK" + "'", str21, "/woK");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = base64_0.encodeToString(byteArray7);
        boolean boolean9 = base64_0.isStrictDecoding();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = base64_0.encodeToString(byteArray7);
        byte[] byteArray10 = base64_0.decode("");
        boolean boolean11 = base64_0.isStrictDecoding();
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray17 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray15, false);
        java.lang.String str18 = base64_0.encodeToString(byteArray15);
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_27 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray26);
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray33 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray31, false);
        boolean boolean35 = base64_27.isInAlphabet(byteArray33, true);
        byte[] byteArray37 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray38 = base64_27.decode(byteArray37);
        org.apache.commons.codec.binary.randoop.Base64 base64_39 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_40 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray46 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray44, false);
        byte[] byteArray47 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray46);
        java.lang.String str48 = base64_40.encodeToString(byteArray47);
        java.lang.String str49 = base64_39.encodeAsString(byteArray47);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_58 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray57);
        byte[] byteArray62 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray64 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray62, false);
        boolean boolean66 = base64_58.isInAlphabet(byteArray64, true);
        byte[] byteArray69 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray64, false, true);
        byte[] byteArray70 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray64);
        byte[] byteArray73 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray64, true, false);
        java.math.BigInteger bigInteger74 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray73);
        byte[] byteArray75 = base64_39.encode(byteArray73);
        java.lang.Object obj76 = base64_27.encode((java.lang.Object) byteArray75);
        java.math.BigInteger bigInteger77 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray75);
        byte[] byteArray78 = org.apache.commons.codec.binary.randoop.Base64.encodeInteger(bigInteger77);
        byte[] byteArray79 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray78);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray82 = base64_0.encode(byteArray78, (int) (short) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[47, 119, 111, 75]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "/woK" + "'", str18, "/woK");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "/woK" + "'", str48, "/woK");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "/woK" + "'", str49, "/woK");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger74);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertNotNull(bigInteger77);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[86, 69, 82, 79, 97, 50, 82, 115, 84, 106, 78, 81, 86, 68, 66, 79, 81, 50, 99, 57, 80, 81, 61, 61, 13, 10]");
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setPadding((byte) 0);
        org.apache.commons.codec.binary.randoop.Base64 base64_7 = builder2.get();
        org.apache.commons.codec.binary.randoop.Base64.Builder builder9 = builder2.setLineLength((int) (short) -1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setPadding((byte) 0);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_15 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray14);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray19, false);
        boolean boolean23 = base64_15.isInAlphabet(byteArray21, true);
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray21, false, true);
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray21);
        byte[] byteArray30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray21, true, false);
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray30);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder32 = builder6.setEncodeTable(byteArray30);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder34 = builder32.setPadding((byte) 10);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder36 = builder32.setUrlSafe(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        byte[] byteArray0 = null;
        byte[] byteArray4 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray0, false, true, (int) (short) 10);
        org.junit.Assert.assertNull(byteArray4);
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        boolean boolean13 = base64_8.isStrictDecoding();
        org.apache.commons.codec.binary.randoop.Base64 base64_14 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray16 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray16, true, true, (int) '#');
        long long21 = base64_14.getEncodedLength(byteArray16);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_30 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray29);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray36 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray34, false);
        boolean boolean38 = base64_30.isInAlphabet(byteArray36, true);
        byte[] byteArray41 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray36, true, false);
        byte[] byteArray42 = base64_14.encode(byteArray36);
        java.lang.String str43 = base64_8.encodeToString(byteArray42);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder44 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy45 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder46 = builder44.setDecodingPolicy(codecPolicy45);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder48 = builder46.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy49 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder50 = builder46.setDecodingPolicy(codecPolicy49);
        org.apache.commons.codec.CodecPolicy codecPolicy51 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder52 = builder46.setDecodingPolicy(codecPolicy51);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder54 = builder52.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64 base64_55 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_56 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray60 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray62 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray60, false);
        byte[] byteArray63 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray62);
        java.lang.String str64 = base64_56.encodeToString(byteArray63);
        java.lang.String str65 = base64_55.encodeAsString(byteArray63);
        byte[] byteArray66 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray67 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray66);
        byte[] byteArray68 = base64_55.decode(byteArray66);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder69 = builder52.setEncodeTable(byteArray66);
        boolean boolean71 = base64_8.isInAlphabet(byteArray66, false);
        org.apache.commons.codec.CodecPolicy codecPolicy72 = base64_8.getCodecPolicy();
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_81 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray80);
        byte[] byteArray85 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray87 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray85, false);
        boolean boolean89 = base64_81.isInAlphabet(byteArray87, true);
        byte[] byteArray91 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray92 = base64_81.decode(byteArray91);
        long long93 = base64_8.getEncodedLength(byteArray92);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4L + "'", long21 == 4L);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n" + "'", str43, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "/woK" + "'", str64, "/woK");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "/woK" + "'", str65, "/woK");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy72 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy72.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        boolean boolean1 = org.apache.commons.codec.binary.randoop.Base64.isBase64("TDNkdlN3PT0NCg");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str13 = base64_0.encodeToString(byteArray11);
        org.apache.commons.codec.binary.randoop.Base64 base64_14 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray18, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray20);
        java.lang.String str22 = base64_14.encodeToString(byteArray21);
        byte[] byteArray23 = base64_0.decode(byteArray21);
        org.apache.commons.codec.CodecPolicy codecPolicy24 = base64_0.getCodecPolicy();
        boolean boolean25 = base64_0.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DQo" + "'", str12, "DQo");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo=" + "'", str13, "DQo=");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "/woK" + "'", str22, "/woK");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + codecPolicy24 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy24.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 100);
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_10 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray9);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray16 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, false);
        boolean boolean18 = base64_10.isInAlphabet(byteArray16, true);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray16, false, true);
        java.lang.String str22 = base64_1.encodeAsString(byteArray21);
        org.apache.commons.codec.binary.randoop.Base64 base64_23 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_24 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray28, false);
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray30);
        java.lang.String str32 = base64_24.encodeToString(byteArray31);
        java.lang.String str33 = base64_23.encodeAsString(byteArray31);
        boolean boolean34 = base64_23.isStrictDecoding();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_44 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray43);
        byte[] byteArray45 = null;
        byte[] byteArray48 = base64_44.encode(byteArray45, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_49 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray53 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray55 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray53, false);
        byte[] byteArray56 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray55);
        java.lang.String str57 = base64_49.encodeToString(byteArray56);
        byte[] byteArray58 = base64_44.encode(byteArray56);
        org.apache.commons.codec.binary.randoop.Base64 base64_59 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 100, byteArray56);
        long long60 = base64_23.getEncodedLength(byteArray56);
        byte[] byteArray61 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray62 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray61);
        java.lang.Object obj63 = base64_23.encode((java.lang.Object) byteArray61);
        byte[] byteArray64 = base64_1.encode(byteArray61);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "TDNkdlN3\r\n" + "'", str22, "TDNkdlN3\r\n");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "/woK" + "'", str32, "/woK");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "/woK" + "'", str33, "/woK");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray48);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "/woK" + "'", str57, "/woK");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 4L + "'", long60 == 4L);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[68, 81, 111, 61, 13, 10]");
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64(0);
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_10 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray9);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray16 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, false);
        boolean boolean18 = base64_10.isInAlphabet(byteArray16, true);
        byte[] byteArray20 = base64_10.decode("DQo");
        byte[] byteArray21 = new byte[] {};
        java.lang.String str22 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray21);
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray21, false, true, (int) (short) -1);
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray21);
        byte[] byteArray28 = base64_10.decode(byteArray21);
        boolean boolean29 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray21);
        byte[] byteArray30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray21);
        boolean boolean32 = base64_1.isInAlphabet(byteArray21, true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_2 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray6, false);
        byte[] byteArray9 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray8);
        java.lang.String str10 = base64_2.encodeToString(byteArray9);
        java.lang.String str11 = base64_1.encodeAsString(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray13 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray12);
        byte[] byteArray14 = base64_1.decode(byteArray12);
        org.apache.commons.codec.binary.randoop.Base64 base64_15 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) 100, byteArray12);
        boolean boolean16 = base64_15.isUrlSafe();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_25 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray24);
        byte[] byteArray27 = base64_15.decode(byteArray24);
        java.lang.String str28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray27);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/woK" + "'", str11, "/woK");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy3 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setDecodingPolicy(codecPolicy3);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder4.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder4.setDecodingPolicy(codecPolicy7);
        org.apache.commons.codec.CodecPolicy codecPolicy9 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder4.setDecodingPolicy(codecPolicy9);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder12 = builder10.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64 base64_13 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_14 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray18, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray20);
        java.lang.String str22 = base64_14.encodeToString(byteArray21);
        java.lang.String str23 = base64_13.encodeAsString(byteArray21);
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray25 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray24);
        byte[] byteArray26 = base64_13.decode(byteArray24);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder27 = builder10.setEncodeTable(byteArray24);
        byte[] byteArray30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray24, true, true);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_40 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray39);
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray46 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray44, false);
        boolean boolean48 = base64_40.isInAlphabet(byteArray46, true);
        byte[] byteArray50 = base64_40.decode("/woK");
        byte[] byteArray51 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str52 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray51);
        byte[] byteArray53 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray51);
        boolean boolean55 = base64_40.isInAlphabet(byteArray53, true);
        org.apache.commons.codec.CodecPolicy codecPolicy56 = base64_40.getCodecPolicy();
        org.apache.commons.codec.binary.randoop.Base64 base64_57 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 10, byteArray24, false, codecPolicy56);
        org.apache.commons.codec.binary.randoop.Base64 base64_58 = new org.apache.commons.codec.binary.randoop.Base64((int) ' ', byteArray24);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "/woK" + "'", str22, "/woK");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "/woK" + "'", str23, "/woK");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "DQo" + "'", str52, "DQo");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + codecPolicy56 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy56.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray19 = base64_8.decode(byteArray18);
        org.apache.commons.codec.binary.randoop.Base64 base64_20 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_21 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray25, false);
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray27);
        java.lang.String str29 = base64_21.encodeToString(byteArray28);
        java.lang.String str30 = base64_20.encodeAsString(byteArray28);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_39 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray38);
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray45 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray43, false);
        boolean boolean47 = base64_39.isInAlphabet(byteArray45, true);
        byte[] byteArray50 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray45, false, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray45);
        byte[] byteArray54 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray45, true, false);
        java.math.BigInteger bigInteger55 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray54);
        byte[] byteArray56 = base64_20.encode(byteArray54);
        java.lang.Object obj57 = base64_8.encode((java.lang.Object) byteArray56);
        java.math.BigInteger bigInteger58 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray56);
        byte[] byteArray59 = org.apache.commons.codec.binary.randoop.Base64.encodeInteger(bigInteger58);
        byte[] byteArray60 = org.apache.commons.codec.binary.randoop.Base64.encodeInteger(bigInteger58);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "/woK" + "'", str29, "/woK");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/woK" + "'", str30, "/woK");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(bigInteger58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.randoop.Base64 base64_7 = builder2.get();
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray13, false);
        byte[] byteArray16 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray15);
        java.lang.String str17 = base64_9.encodeToString(byteArray16);
        java.lang.String str18 = base64_8.encodeAsString(byteArray16);
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray19);
        java.lang.String str21 = base64_8.encodeToString(byteArray19);
        org.apache.commons.codec.binary.randoop.Base64 base64_22 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray26, false);
        byte[] byteArray29 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray28);
        java.lang.String str30 = base64_22.encodeToString(byteArray29);
        byte[] byteArray31 = base64_8.decode(byteArray29);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_40 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray39);
        byte[] byteArray42 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray39, true);
        java.lang.Object obj43 = base64_8.encode((java.lang.Object) byteArray39);
        boolean boolean45 = base64_7.isInAlphabet(byteArray39, true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "/woK" + "'", str17, "/woK");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "/woK" + "'", str18, "/woK");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DQo" + "'", str20, "DQo");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DQo=" + "'", str21, "DQo=");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/woK" + "'", str30, "/woK");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[65, 81, 111, 75, 47, 47, 56, 75, 13, 10]");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        boolean boolean13 = base64_8.isStrictDecoding();
        org.apache.commons.codec.binary.randoop.Base64 base64_14 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray16 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray16, true, true, (int) '#');
        long long21 = base64_14.getEncodedLength(byteArray16);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_30 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray29);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray36 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray34, false);
        boolean boolean38 = base64_30.isInAlphabet(byteArray36, true);
        byte[] byteArray41 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray36, true, false);
        byte[] byteArray42 = base64_14.encode(byteArray36);
        java.lang.String str43 = base64_8.encodeToString(byteArray42);
        org.apache.commons.codec.binary.randoop.Base64 base64_44 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_45 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray51 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray49, false);
        byte[] byteArray52 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray51);
        java.lang.String str53 = base64_45.encodeToString(byteArray52);
        java.lang.String str54 = base64_44.encodeAsString(byteArray52);
        byte[] byteArray55 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str56 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray55);
        java.lang.String str57 = base64_44.encodeToString(byteArray55);
        byte[] byteArray58 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str59 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray58);
        byte[] byteArray60 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray58);
        java.lang.Object obj61 = base64_44.encode((java.lang.Object) byteArray58);
        byte[] byteArray62 = base64_8.decode(byteArray58);
        org.apache.commons.codec.CodecPolicy codecPolicy63 = base64_8.getCodecPolicy();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4L + "'", long21 == 4L);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n" + "'", str43, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "/woK" + "'", str53, "/woK");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "/woK" + "'", str54, "/woK");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "DQo" + "'", str56, "DQo");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "DQo=" + "'", str57, "DQo=");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "DQo" + "'", str59, "DQo");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + codecPolicy63 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy63.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        byte[] byteArray1 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AQoK//8K\001\n\n\ufffd\ufffd\n");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray1, false, false, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (8) than the specified maximum size of 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[1, 10, 10, -1, -1, 10]");
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.randoop.Base64 base64_7 = builder2.get();
        boolean boolean9 = base64_7.isInAlphabet("TDNkdlN3PT0NCg");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray5 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray3, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray3, true, false);
        java.lang.String str9 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray8, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 75, 13, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "L3dvSw0K" + "'", str9, "L3dvSw0K");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[76, 51, 100, 118, 83, 119, 48, 75]");
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder2.setUrlSafe(true);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_17 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray16);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray21, false);
        boolean boolean25 = base64_17.isInAlphabet(byteArray23, true);
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray28 = base64_17.decode(byteArray27);
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray27, false, true);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder32 = builder2.setEncodeTable(byteArray27);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder33 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy34 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder35 = builder33.setDecodingPolicy(codecPolicy34);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder37 = builder35.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder39 = builder35.setPadding((byte) 0);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_48 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray47);
        byte[] byteArray52 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray54 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray52, false);
        boolean boolean56 = base64_48.isInAlphabet(byteArray54, true);
        byte[] byteArray59 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray54, false, true);
        byte[] byteArray60 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray54);
        byte[] byteArray63 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray54, true, false);
        java.math.BigInteger bigInteger64 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray63);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder65 = builder39.setEncodeTable(byteArray63);
        java.lang.String str66 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray63);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder67 = builder2.setEncodeTable(byteArray63);
        java.lang.String str68 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray63);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray72 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray63, false, true, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (16) than the specified maximum size of -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[65, 65, 111, 75, 67, 103, 111, 66]");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "TDNkdlN3PT0NCg==" + "'", str66, "TDNkdlN3PT0NCg==");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "TDNkdlN3PT0NCg" + "'", str68, "TDNkdlN3PT0NCg");
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        byte[] byteArray1 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray1);
        byte[] byteArray3 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray1);
        org.apache.commons.codec.binary.randoop.Base64 base64_5 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 0, byteArray1, true);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_14 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray13);
        byte[] byteArray15 = null;
        byte[] byteArray18 = base64_14.encode(byteArray15, 100, 76);
        boolean boolean19 = base64_14.isStrictDecoding();
        org.apache.commons.codec.binary.randoop.Base64.Builder builder20 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy21 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder22 = builder20.setDecodingPolicy(codecPolicy21);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder24 = builder22.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy25 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder26 = builder22.setDecodingPolicy(codecPolicy25);
        org.apache.commons.codec.CodecPolicy codecPolicy27 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder28 = builder22.setDecodingPolicy(codecPolicy27);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder30 = builder28.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64 base64_31 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_32 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray38 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray36, false);
        byte[] byteArray39 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray38);
        java.lang.String str40 = base64_32.encodeToString(byteArray39);
        java.lang.String str41 = base64_31.encodeAsString(byteArray39);
        byte[] byteArray42 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray43 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray42);
        byte[] byteArray44 = base64_31.decode(byteArray42);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder45 = builder28.setEncodeTable(byteArray42);
        byte[] byteArray48 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray42, true, true);
        boolean boolean50 = base64_14.isInAlphabet(byteArray42, false);
        org.apache.commons.codec.binary.randoop.Base64 base64_51 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray55 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray57 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray55, false);
        byte[] byteArray58 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray57);
        java.lang.String str59 = base64_51.encodeToString(byteArray58);
        byte[] byteArray61 = base64_51.decode("");
        boolean boolean62 = base64_51.isStrictDecoding();
        byte[] byteArray66 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray68 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray66, false);
        java.lang.String str69 = base64_51.encodeToString(byteArray66);
        byte[] byteArray73 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray75 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray73, false);
        byte[] byteArray76 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray75);
        byte[] byteArray77 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray75);
        boolean boolean79 = base64_51.isInAlphabet(byteArray75, true);
        java.lang.String str80 = base64_14.encodeToString(byteArray75);
        byte[] byteArray81 = base64_5.decode(byteArray75);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[68, 81, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "/woK" + "'", str40, "/woK");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "/woK" + "'", str41, "/woK");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "/woK" + "'", str59, "/woK");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[47, 119, 111, 75]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "/woK" + "'", str69, "/woK");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str80, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-1, 10, 10]");
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        byte[] byteArray4 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, true, true, (int) '#');
        org.apache.commons.codec.binary.randoop.Base64.Builder builder9 = builder2.setLineSeparator(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str11 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray10);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder13 = builder9.setLineSeparator(byteArray12);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder15 = builder13.setPadding((byte) -1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DQo" + "'", str11, "DQo");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray19 = base64_8.decode(byteArray18);
        boolean boolean21 = base64_8.isInAlphabet("");
        boolean boolean22 = base64_8.isStrictDecoding();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_31 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray30);
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray37 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray35, false);
        boolean boolean39 = base64_31.isInAlphabet(byteArray37, true);
        byte[] byteArray41 = base64_31.decode("/woK");
        byte[] byteArray42 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str43 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray42);
        byte[] byteArray44 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray42);
        boolean boolean46 = base64_31.isInAlphabet(byteArray44, true);
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_55 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray54);
        byte[] byteArray56 = null;
        byte[] byteArray59 = base64_55.encode(byteArray56, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_60 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray64 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray66 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray64, false);
        byte[] byteArray67 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray66);
        java.lang.String str68 = base64_60.encodeToString(byteArray67);
        byte[] byteArray69 = base64_55.encode(byteArray67);
        byte[] byteArray70 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray69);
        byte[] byteArray71 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray69);
        byte[] byteArray75 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray69, false, true, 76);
        byte[] byteArray76 = base64_31.encode(byteArray75);
        long long77 = base64_8.getEncodedLength(byteArray76);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "DQo" + "'", str43, "DQo");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray59);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "/woK" + "'", str68, "/woK");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[76, 51, 100, 118, 83, 119, 69, 75, 67, 118, 47, 47, 67, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[76, 51, 100, 118, 83, 119, 69, 75, 67, 118, 95, 95, 67, 103]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[84, 68, 78, 107, 100, 108, 78, 51, 1, 10, 10, -1, -1, 10, 82, 85, 116, 68, 100, 108, 57, 102, 1, 10, 10, -1, -1, 10, 81, 50, 99, 61, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 94L + "'", long77 == 94L);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setPadding((byte) 0);
        org.apache.commons.codec.binary.randoop.Base64 base64_7 = builder2.get();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_16 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray15);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray22 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray20, false);
        boolean boolean24 = base64_16.isInAlphabet(byteArray22, true);
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray22, true);
        boolean boolean27 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray22);
        java.lang.Object obj28 = base64_7.decode((java.lang.Object) byteArray22);
        boolean boolean29 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray22);
        boolean boolean30 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray22);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_19 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray18);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray25 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray23, false);
        boolean boolean27 = base64_19.isInAlphabet(byteArray25, true);
        byte[] byteArray30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray25, false, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray25);
        byte[] byteArray34 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray25, true, false);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray34);
        byte[] byteArray36 = base64_0.encode(byteArray34);
        org.apache.commons.codec.CodecPolicy codecPolicy37 = base64_0.getCodecPolicy();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertTrue("'" + codecPolicy37 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy37.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray6);
        boolean boolean9 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_10 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) -1, byteArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [L3dvSw==]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("/woK");
        boolean boolean19 = base64_8.isStrictDecoding();
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str21 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray20);
        java.lang.Object obj23 = base64_8.encode((java.lang.Object) byteArray20);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DQo" + "'", str21, "DQo");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(obj23);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray19 = base64_8.decode(byteArray18);
        org.apache.commons.codec.binary.randoop.Base64 base64_20 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_21 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray25, false);
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray27);
        java.lang.String str29 = base64_21.encodeToString(byteArray28);
        java.lang.String str30 = base64_20.encodeAsString(byteArray28);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_39 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray38);
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray45 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray43, false);
        boolean boolean47 = base64_39.isInAlphabet(byteArray45, true);
        byte[] byteArray50 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray45, false, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray45);
        byte[] byteArray54 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray45, true, false);
        java.math.BigInteger bigInteger55 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray54);
        byte[] byteArray56 = base64_20.encode(byteArray54);
        java.lang.Object obj57 = base64_8.encode((java.lang.Object) byteArray56);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_66 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray65);
        byte[] byteArray68 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray65, true);
        java.lang.String str69 = base64_8.encodeAsString(byteArray65);
        byte[] byteArray70 = new byte[] {};
        java.lang.String str71 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray70);
        byte[] byteArray75 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray70, false, true, (int) (short) -1);
        java.math.BigInteger bigInteger76 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray70);
        byte[] byteArray77 = base64_8.encode(byteArray70);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "/woK" + "'", str29, "/woK");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/woK" + "'", str30, "/woK");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[65, 81, 111, 75, 47, 47, 56, 75, 13, 10]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "AQoK//8K\001\n\n\ufffd\ufffd\n" + "'", str69, "AQoK//8K\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(bigInteger76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_19 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray18);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray25 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray23, false);
        boolean boolean27 = base64_19.isInAlphabet(byteArray25, true);
        byte[] byteArray30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray25, false, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray25);
        byte[] byteArray34 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray25, true, false);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray34);
        byte[] byteArray36 = base64_0.encode(byteArray34);
        byte[] byteArray37 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray34);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[47, 119, 111, 75]");
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        org.apache.commons.codec.binary.randoop.Base64.Builder builder7 = builder0.setLineSeparator(byteArray6);
        org.apache.commons.codec.CodecPolicy codecPolicy8 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder9 = builder7.setDecodingPolicy(codecPolicy8);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_19 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray18);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray25 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray23, false);
        boolean boolean27 = base64_19.isInAlphabet(byteArray25, true);
        byte[] byteArray29 = base64_19.decode("DQo");
        org.apache.commons.codec.binary.randoop.Base64 base64_30 = new org.apache.commons.codec.binary.randoop.Base64((-1), byteArray29);
        org.apache.commons.codec.CodecPolicy codecPolicy31 = base64_30.getCodecPolicy();
        org.apache.commons.codec.binary.randoop.Base64.Builder builder32 = builder7.setDecodingPolicy(codecPolicy31);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[13, 10]");
        org.junit.Assert.assertTrue("'" + codecPolicy31 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy31.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_18 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray17);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray22, false);
        boolean boolean26 = base64_18.isInAlphabet(byteArray24, true);
        byte[] byteArray29 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray24, false, true);
        byte[] byteArray30 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray24);
        java.lang.String str31 = base64_9.encodeAsString(byteArray24);
        byte[] byteArray32 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_33 = new org.apache.commons.codec.binary.randoop.Base64(100, byteArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [L3dvSw==??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str31, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        byte[] byteArray1 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("_woK");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-1, 10, 10]");
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 100);
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_10 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray9);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_19 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray18);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray25 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray23, false);
        boolean boolean27 = base64_19.isInAlphabet(byteArray25, true);
        byte[] byteArray30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray25, false, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray25);
        java.lang.String str32 = base64_10.encodeAsString(byteArray25);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_41 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray40);
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray47 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray45, false);
        boolean boolean49 = base64_41.isInAlphabet(byteArray47, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray52 = base64_41.decode(byteArray51);
        java.lang.String str53 = base64_10.encodeAsString(byteArray52);
        java.lang.String str54 = base64_1.encodeAsString(byteArray52);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_64 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray63);
        byte[] byteArray68 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray70 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray68, false);
        boolean boolean72 = base64_64.isInAlphabet(byteArray70, true);
        byte[] byteArray74 = base64_64.decode("DQo");
        org.apache.commons.codec.binary.randoop.Base64 base64_75 = new org.apache.commons.codec.binary.randoop.Base64((-1), byteArray74);
        boolean boolean76 = base64_75.isUrlSafe();
        byte[] byteArray78 = base64_75.decode("AQoK//8K\001\n\n\ufffd\ufffd\n");
        java.lang.String str79 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray78);
        java.lang.Object obj80 = base64_1.decode((java.lang.Object) byteArray78);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str32, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[13, 10]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "AQoK//8K" + "'", str79, "AQoK//8K");
        org.junit.Assert.assertNotNull(obj80);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = base64_0.encodeToString(byteArray7);
        boolean boolean10 = base64_0.isInAlphabet("L3dvSw==\001\n\n\ufffd\ufffd\n");
        boolean boolean11 = base64_0.isUrlSafe();
        byte[] byteArray13 = base64_0.decode("UkZGdkRRbz0=");
        org.apache.commons.codec.binary.randoop.Base64 base64_14 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray18, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray20);
        java.lang.String str22 = base64_14.encodeToString(byteArray21);
        byte[] byteArray24 = base64_14.decode("");
        boolean boolean26 = base64_14.isInAlphabet("AQoK//8K");
        byte[] byteArray27 = null;
        java.lang.String str28 = base64_14.encodeToString(byteArray27);
        boolean boolean30 = base64_14.isInAlphabet("TDNkdlN3\r\n");
        byte[] byteArray32 = base64_14.decode("AAoKCgoB");
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray33);
        byte[] byteArray38 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray33, false, true, (int) (short) -1);
        java.math.BigInteger bigInteger39 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray33);
        byte[] byteArray40 = base64_14.decode(byteArray33);
        byte[] byteArray43 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray33, false, true);
        java.lang.String str44 = base64_0.encodeAsString(byteArray33);
        java.lang.String str45 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray33);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[82, 70, 70, 118, 68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "/woK" + "'", str22, "/woK");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str3 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray2);
        org.apache.commons.codec.binary.randoop.Base64 base64_5 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) 1, byteArray4);
        org.apache.commons.codec.binary.randoop.Base64 base64_7 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) -1, byteArray4, false);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "DQo" + "'", str3, "DQo");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray19 = base64_8.decode(byteArray18);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_28 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray27);
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_37 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray36);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray43 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray41, false);
        boolean boolean45 = base64_37.isInAlphabet(byteArray43, true);
        byte[] byteArray48 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray43, false, true);
        byte[] byteArray49 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray43);
        java.lang.String str50 = base64_28.encodeAsString(byteArray43);
        byte[] byteArray51 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray43);
        byte[] byteArray55 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray51, true, true, (int) ' ');
        java.lang.String str56 = base64_8.encodeToString(byteArray51);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder57 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy58 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder59 = builder57.setDecodingPolicy(codecPolicy58);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder61 = builder59.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder63 = builder59.setPadding((byte) 0);
        org.apache.commons.codec.binary.randoop.Base64 base64_64 = builder59.get();
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 10, (byte) 100 };
        byte[] byteArray69 = base64_64.encode(byteArray68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj70 = base64_8.encode((java.lang.Object) base64_64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str50, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 13, 10]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0NCg==\001\n\n\ufffd\ufffd\n" + "'", str56, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0NCg==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(base64_64);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, 10, 100]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[65, 81, 112, 107]");
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray9);
        boolean boolean13 = base64_8.isInAlphabet(byteArray11, true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        byte[] byteArray1 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("");
        byte[] byteArray3 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray1, true);
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray3, true, false);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        boolean boolean13 = base64_8.isStrictDecoding();
        org.apache.commons.codec.binary.randoop.Base64 base64_14 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray16 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray16, true, true, (int) '#');
        long long21 = base64_14.getEncodedLength(byteArray16);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_30 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray29);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray36 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray34, false);
        boolean boolean38 = base64_30.isInAlphabet(byteArray36, true);
        byte[] byteArray41 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray36, true, false);
        byte[] byteArray42 = base64_14.encode(byteArray36);
        java.lang.String str43 = base64_8.encodeToString(byteArray42);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder44 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy45 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder46 = builder44.setDecodingPolicy(codecPolicy45);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder48 = builder46.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy49 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder50 = builder46.setDecodingPolicy(codecPolicy49);
        org.apache.commons.codec.CodecPolicy codecPolicy51 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder52 = builder46.setDecodingPolicy(codecPolicy51);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder54 = builder52.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64 base64_55 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_56 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray60 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray62 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray60, false);
        byte[] byteArray63 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray62);
        java.lang.String str64 = base64_56.encodeToString(byteArray63);
        java.lang.String str65 = base64_55.encodeAsString(byteArray63);
        byte[] byteArray66 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray67 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray66);
        byte[] byteArray68 = base64_55.decode(byteArray66);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder69 = builder52.setEncodeTable(byteArray66);
        boolean boolean71 = base64_8.isInAlphabet(byteArray66, false);
        byte[] byteArray72 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray66);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4L + "'", long21 == 4L);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n" + "'", str43, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "/woK" + "'", str64, "/woK");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "/woK" + "'", str65, "/woK");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[68, 81, 111, 61]");
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setPadding((byte) 0);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_15 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray14);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray19, false);
        boolean boolean23 = base64_15.isInAlphabet(byteArray21, true);
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray21, false, true);
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray21);
        byte[] byteArray30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray21, true, false);
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray30);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder32 = builder6.setEncodeTable(byteArray30);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder34 = builder32.setPadding((byte) 10);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder35 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy36 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder37 = builder35.setDecodingPolicy(codecPolicy36);
        byte[] byteArray39 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray43 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray39, true, true, (int) '#');
        org.apache.commons.codec.binary.randoop.Base64.Builder builder44 = builder37.setLineSeparator(byteArray43);
        byte[] byteArray45 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str46 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray45);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder48 = builder37.setEncodeTable(byteArray45);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder49 = builder32.setLineSeparator(byteArray45);
        byte[] byteArray50 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray45);
        byte[] byteArray51 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray45);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "DQo" + "'", str46, "DQo");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setPadding((byte) 0);
        org.apache.commons.codec.binary.randoop.Base64 base64_7 = builder2.get();
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy9 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder8.setDecodingPolicy(codecPolicy9);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder12 = builder10.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy13 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder14 = builder10.setDecodingPolicy(codecPolicy13);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray18, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray20);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder22 = builder14.setEncodeTable(byteArray20);
        long long23 = base64_7.getEncodedLength(byteArray20);
        org.apache.commons.codec.binary.randoop.Base64 base64_25 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 100);
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str27 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray26);
        byte[] byteArray29 = base64_25.encode(byteArray28);
        java.lang.Object obj30 = base64_7.encode((java.lang.Object) byteArray28);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 8L + "'", long23 == 8L);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "DQo" + "'", str27, "DQo");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[82, 70, 70, 118, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj30);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, false, true);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray14);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray20);
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray20, false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[95, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 119, 111, 75]");
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("/woK");
        boolean boolean19 = base64_8.isStrictDecoding();
        byte[] byteArray20 = null;
        byte[] byteArray21 = base64_8.decode(byteArray20);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(byteArray21);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("/woK");
        boolean boolean19 = base64_8.isStrictDecoding();
        boolean boolean20 = base64_8.isStrictDecoding();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_29 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray28);
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray35 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray33, false);
        boolean boolean37 = base64_29.isInAlphabet(byteArray35, true);
        byte[] byteArray39 = base64_29.decode("/woK");
        byte[] byteArray40 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str41 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray40);
        boolean boolean44 = base64_29.isInAlphabet(byteArray42, true);
        byte[] byteArray48 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray42, false, false, (int) ' ');
        byte[] byteArray49 = base64_8.encode(byteArray42);
        boolean boolean50 = base64_8.isStrictDecoding();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "DQo" + "'", str41, "DQo");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray11);
        byte[] byteArray13 = base64_0.decode(byteArray11);
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray13);
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray14);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray10, false);
        byte[] byteArray13 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray12);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder14 = builder6.setEncodeTable(byteArray12);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder16 = builder14.setLineLength((int) (byte) 100);
        org.apache.commons.codec.binary.randoop.Base64 base64_18 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_19 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray25 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray23, false);
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray25);
        java.lang.String str27 = base64_19.encodeToString(byteArray26);
        java.lang.String str28 = base64_18.encodeAsString(byteArray26);
        byte[] byteArray29 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray29);
        java.lang.String str31 = base64_18.encodeToString(byteArray29);
        byte[] byteArray33 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray36 = base64_18.encode(byteArray33, 1, 0);
        byte[] byteArray39 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray36, false, true);
        org.apache.commons.codec.binary.randoop.Base64 base64_40 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 10, byteArray36);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder41 = builder14.setEncodeTable(byteArray36);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder43 = builder14.setUrlSafe(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "/woK" + "'", str27, "/woK");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "/woK" + "'", str28, "/woK");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "DQo" + "'", str30, "DQo");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "DQo=" + "'", str31, "DQo=");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setLineLength(0);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setPadding((byte) 100);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder6.setUrlSafe(true);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_17 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray16);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray21, false);
        boolean boolean25 = base64_17.isInAlphabet(byteArray23, true);
        byte[] byteArray27 = base64_17.decode("DQo");
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_36 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray35);
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray42 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray40, false);
        boolean boolean44 = base64_36.isInAlphabet(byteArray42, true);
        byte[] byteArray47 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray42, false, true);
        byte[] byteArray48 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray42);
        byte[] byteArray51 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray42, true, false);
        java.math.BigInteger bigInteger52 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray51);
        byte[] byteArray55 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray51, false, true);
        byte[] byteArray56 = base64_17.encode(byteArray51);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder57 = builder8.setLineSeparator(byteArray56);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger52);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[84, 68, 78, 107, 100, 108, 78, 51, 1, 10, 10, -1, -1, 10, 80, 84, 48, 78, 67, 103, 61, 61, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_13 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray17, false);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray19);
        java.lang.String str21 = base64_13.encodeToString(byteArray20);
        byte[] byteArray22 = base64_8.encode(byteArray20);
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray26, false);
        byte[] byteArray29 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray28);
        java.lang.String str30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray28);
        byte[] byteArray31 = base64_8.decode(byteArray28);
        org.apache.commons.codec.CodecPolicy codecPolicy32 = base64_8.getCodecPolicy();
        java.lang.Object obj33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj34 = base64_8.decode(obj33);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/woK" + "'", str21, "/woK");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "L3dvSw" + "'", str30, "L3dvSw");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 10]");
        org.junit.Assert.assertTrue("'" + codecPolicy32 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy32.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setLineLength(0);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setPadding((byte) 100);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder6.setUrlSafe(true);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder8.setPadding((byte) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 100);
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str3 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray2);
        byte[] byteArray5 = base64_1.encode(byteArray4);
        org.apache.commons.codec.CodecPolicy codecPolicy6 = base64_1.getCodecPolicy();
        org.apache.commons.codec.binary.randoop.Base64 base64_7 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray14);
        java.lang.String str16 = base64_8.encodeToString(byteArray15);
        java.lang.String str17 = base64_7.encodeAsString(byteArray15);
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray18);
        java.lang.String str20 = base64_7.encodeToString(byteArray18);
        boolean boolean21 = base64_7.isStrictDecoding();
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("");
        byte[] byteArray26 = base64_7.encode(byteArray23, (int) 'a', (int) (byte) 100);
        java.lang.String str27 = base64_1.encodeAsString(byteArray26);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "DQo" + "'", str3, "DQo");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[82, 70, 70, 118, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + codecPolicy6 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy6.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "/woK" + "'", str16, "/woK");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "/woK" + "'", str17, "/woK");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DQo" + "'", str19, "DQo");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DQo=" + "'", str20, "DQo=");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray3 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray3, true, true, (int) '#');
        long long8 = base64_1.getEncodedLength(byteArray3);
        boolean boolean9 = base64_1.isUrlSafe();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_18 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray17);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray22, false);
        boolean boolean26 = base64_18.isInAlphabet(byteArray24, true);
        byte[] byteArray28 = base64_18.decode("/woK");
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray28, true, false);
        boolean boolean32 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray31);
        byte[] byteArray33 = base64_1.decode(byteArray31);
        org.apache.commons.codec.binary.randoop.Base64 base64_35 = new org.apache.commons.codec.binary.randoop.Base64(1, byteArray33, false);
        boolean boolean36 = base64_35.isStrictDecoding();
        org.apache.commons.codec.binary.randoop.Base64 base64_37 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_38 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray42 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray44 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray42, false);
        byte[] byteArray45 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray44);
        java.lang.String str46 = base64_38.encodeToString(byteArray45);
        java.lang.String str47 = base64_37.encodeAsString(byteArray45);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_57 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray56);
        byte[] byteArray61 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray63 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray61, false);
        boolean boolean65 = base64_57.isInAlphabet(byteArray63, true);
        byte[] byteArray67 = base64_57.decode("DQo");
        org.apache.commons.codec.binary.randoop.Base64 base64_68 = new org.apache.commons.codec.binary.randoop.Base64((-1), byteArray67);
        long long69 = base64_37.getEncodedLength(byteArray67);
        java.lang.Object obj70 = base64_35.decode((java.lang.Object) byteArray67);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4L + "'", long8 == 4L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[47, 119, 111, 75, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "/woK" + "'", str46, "/woK");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "/woK" + "'", str47, "/woK");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[13, 10]");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 4L + "'", long69 == 4L);
        org.junit.Assert.assertNotNull(obj70);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        long long7 = base64_0.getEncodedLength(byteArray2);
        boolean boolean8 = base64_0.isUrlSafe();
        byte[] byteArray10 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray10, true, true, (int) '#');
        byte[] byteArray15 = base64_0.encode(byteArray14);
        boolean boolean17 = base64_0.isInAlphabet("TDNkdlN3\r\n");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4L + "'", long7 == 4L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[82, 70, 70, 118, 68, 81, 111, 61]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        byte[] byteArray1 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray5 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray1, true, true, (int) '#');
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray5);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray7);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[82, 70, 70, 118, 68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[82, 70, 70, 118, 68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[85, 107, 90, 71, 100, 107, 82, 82, 98, 119]");
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setPadding((byte) 0);
        org.apache.commons.codec.binary.randoop.Base64 base64_7 = builder2.get();
        byte[] byteArray9 = base64_7.decode("L3dvSw==");
        boolean boolean10 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray9);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setPadding((byte) 0);
        org.apache.commons.codec.binary.randoop.Base64 base64_7 = builder2.get();
        byte[] byteArray9 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AQoK//8K");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder2.setEncodeTable(byteArray9);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder12 = builder10.setUrlSafe(true);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder13 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy14 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder15 = builder13.setDecodingPolicy(codecPolicy14);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder17 = builder15.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy18 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder19 = builder15.setDecodingPolicy(codecPolicy18);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_28 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray27);
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_37 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray36);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray43 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray41, false);
        boolean boolean45 = base64_37.isInAlphabet(byteArray43, true);
        byte[] byteArray48 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray43, false, true);
        byte[] byteArray49 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray43);
        java.lang.String str50 = base64_28.encodeAsString(byteArray43);
        org.apache.commons.codec.CodecPolicy codecPolicy51 = base64_28.getCodecPolicy();
        org.apache.commons.codec.binary.randoop.Base64.Builder builder52 = builder15.setDecodingPolicy(codecPolicy51);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder53 = builder10.setDecodingPolicy(codecPolicy51);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(base64_7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str50, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertTrue("'" + codecPolicy51 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy51.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("/woK");
        boolean boolean19 = base64_8.isStrictDecoding();
        boolean boolean20 = base64_8.isStrictDecoding();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_29 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray28);
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray35 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray33, false);
        boolean boolean37 = base64_29.isInAlphabet(byteArray35, true);
        byte[] byteArray39 = base64_29.decode("/woK");
        byte[] byteArray40 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str41 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray40);
        boolean boolean44 = base64_29.isInAlphabet(byteArray42, true);
        byte[] byteArray48 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray42, false, false, (int) ' ');
        byte[] byteArray49 = base64_8.encode(byteArray42);
        java.lang.String str50 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray42);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "DQo" + "'", str41, "DQo");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_2 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray6, false);
        byte[] byteArray9 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray8);
        java.lang.String str10 = base64_2.encodeToString(byteArray9);
        java.lang.String str11 = base64_1.encodeAsString(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray13 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray12);
        byte[] byteArray14 = base64_1.decode(byteArray12);
        org.apache.commons.codec.binary.randoop.Base64 base64_15 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) 100, byteArray12);
        boolean boolean16 = base64_15.isUrlSafe();
        org.apache.commons.codec.CodecPolicy codecPolicy17 = base64_15.getCodecPolicy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj19 = base64_15.decode((java.lang.Object) 0.0d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/woK" + "'", str11, "/woK");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy17 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy17.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("/woK");
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray19);
        boolean boolean23 = base64_8.isInAlphabet(byteArray21, true);
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str25 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray24);
        java.lang.String str27 = base64_8.encodeAsString(byteArray26);
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray33 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray31, false);
        byte[] byteArray34 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray33);
        byte[] byteArray35 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray33);
        boolean boolean36 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray35);
        byte[] byteArray37 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray35);
        byte[] byteArray38 = base64_8.decode(byteArray35);
        byte[] byteArray40 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray44 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray40, true, true, (int) '#');
        byte[] byteArray47 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray44, true, true);
        long long48 = base64_8.getEncodedLength(byteArray47);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DQo" + "'", str20, "DQo");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DQo" + "'", str25, "DQo");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[68, 81, 111, 61]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "RFFvPQ==\001\n\n\ufffd\ufffd\n" + "'", str27, "RFFvPQ==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[82, 70, 70, 118, 68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 24L + "'", long48 == 24L);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        long long7 = base64_0.getEncodedLength(byteArray2);
        boolean boolean8 = base64_0.isUrlSafe();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_17 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray16);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray21, false);
        boolean boolean25 = base64_17.isInAlphabet(byteArray23, true);
        byte[] byteArray27 = base64_17.decode("/woK");
        byte[] byteArray30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray27, true, false);
        boolean boolean31 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray30);
        byte[] byteArray32 = base64_0.decode(byteArray30);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder33 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy34 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder35 = builder33.setDecodingPolicy(codecPolicy34);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder37 = builder35.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder39 = builder35.setPadding((byte) 0);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_48 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray47);
        byte[] byteArray52 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray54 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray52, false);
        boolean boolean56 = base64_48.isInAlphabet(byteArray54, true);
        byte[] byteArray59 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray54, false, true);
        byte[] byteArray60 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray54);
        byte[] byteArray63 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray54, true, false);
        java.math.BigInteger bigInteger64 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray63);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder65 = builder39.setEncodeTable(byteArray63);
        boolean boolean67 = base64_0.isInAlphabet(byteArray63, false);
        boolean boolean68 = base64_0.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4L + "'", long7 == 4L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[47, 119, 111, 75, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 100, byteArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [DQo??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[82, 70, 70, 118, 68, 81, 111, 61]");
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = base64_0.encodeToString(byteArray7);
        byte[] byteArray10 = base64_0.decode("");
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray10);
        boolean boolean12 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray11);
        byte[] byteArray13 = base64_0.decode(byteArray11);
        org.apache.commons.codec.binary.randoop.Base64 base64_14 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_15 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray19, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray21);
        java.lang.String str23 = base64_15.encodeToString(byteArray22);
        java.lang.String str24 = base64_14.encodeAsString(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str26 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray25);
        java.lang.String str27 = base64_14.encodeToString(byteArray25);
        byte[] byteArray29 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray32 = base64_14.encode(byteArray29, 1, 0);
        java.lang.String str33 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray32);
        java.lang.String str34 = base64_0.encodeToString(byteArray32);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder35 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy36 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder37 = builder35.setDecodingPolicy(codecPolicy36);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder39 = builder37.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy40 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder41 = builder37.setDecodingPolicy(codecPolicy40);
        org.apache.commons.codec.CodecPolicy codecPolicy42 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder43 = builder37.setDecodingPolicy(codecPolicy42);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder45 = builder43.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64 base64_46 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_47 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray51 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray53 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray51, false);
        byte[] byteArray54 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray53);
        java.lang.String str55 = base64_47.encodeToString(byteArray54);
        java.lang.String str56 = base64_46.encodeAsString(byteArray54);
        byte[] byteArray57 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray58 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray57);
        byte[] byteArray59 = base64_46.decode(byteArray57);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder60 = builder43.setEncodeTable(byteArray57);
        byte[] byteArray63 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray57, true, true);
        byte[] byteArray66 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray57, false, true);
        java.lang.String str67 = base64_0.encodeAsString(byteArray57);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "/woK" + "'", str23, "/woK");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "/woK" + "'", str24, "/woK");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DQo" + "'", str26, "DQo");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "DQo=" + "'", str27, "DQo=");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "/woK" + "'", str55, "/woK");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "/woK" + "'", str56, "/woK");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[68, 81, 111]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "DQo=" + "'", str67, "DQo=");
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str13 = base64_0.encodeToString(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray18 = base64_0.encode(byteArray15, 1, 0);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray22, false);
        long long25 = base64_0.getEncodedLength(byteArray24);
        java.lang.String str26 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray24);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DQo" + "'", str12, "DQo");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo=" + "'", str13, "DQo=");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 8L + "'", long25 == 8L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "L3dvSw" + "'", str26, "L3dvSw");
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray19 = base64_9.decode("DQo");
        org.apache.commons.codec.binary.randoop.Base64 base64_20 = new org.apache.commons.codec.binary.randoop.Base64((-1), byteArray19);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray26 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray24, false);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray29 = base64_20.encode(byteArray26, (int) (byte) 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[47, 119, 111, 75]");
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("DQo");
        boolean boolean19 = base64_8.isUrlSafe();
        byte[] byteArray21 = base64_8.decode("DQo=");
        boolean boolean23 = base64_8.isInAlphabet("RFFvDQo=\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[13, 10]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[13, 10]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = base64_0.encodeToString(byteArray7);
        byte[] byteArray10 = base64_0.decode("");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray16 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, false);
        java.lang.String str17 = base64_0.encodeAsString(byteArray14);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[47, 119, 111, 75]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "/woK" + "'", str17, "/woK");
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray19 = base64_8.decode(byteArray18);
        org.apache.commons.codec.binary.randoop.Base64 base64_20 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_21 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray25, false);
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray27);
        java.lang.String str29 = base64_21.encodeToString(byteArray28);
        java.lang.String str30 = base64_20.encodeAsString(byteArray28);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_39 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray38);
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray45 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray43, false);
        boolean boolean47 = base64_39.isInAlphabet(byteArray45, true);
        byte[] byteArray50 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray45, false, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray45);
        byte[] byteArray54 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray45, true, false);
        java.math.BigInteger bigInteger55 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray54);
        byte[] byteArray56 = base64_20.encode(byteArray54);
        java.lang.Object obj57 = base64_8.encode((java.lang.Object) byteArray56);
        boolean boolean58 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray56);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "/woK" + "'", str29, "/woK");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/woK" + "'", str30, "/woK");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, true);
        java.lang.String str19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray14);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "L3dvSw" + "'", str19, "L3dvSw");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[76, 51, 100, 118, 83, 119, 61, 61]");
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        boolean boolean13 = base64_8.isStrictDecoding();
        org.apache.commons.codec.binary.randoop.Base64 base64_14 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray16 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray16, true, true, (int) '#');
        long long21 = base64_14.getEncodedLength(byteArray16);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_30 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray29);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray36 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray34, false);
        boolean boolean38 = base64_30.isInAlphabet(byteArray36, true);
        byte[] byteArray41 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray36, true, false);
        byte[] byteArray42 = base64_14.encode(byteArray36);
        java.lang.String str43 = base64_8.encodeToString(byteArray42);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder44 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy45 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder46 = builder44.setDecodingPolicy(codecPolicy45);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder48 = builder46.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder50 = builder46.setPadding((byte) 0);
        org.apache.commons.codec.binary.randoop.Base64 base64_51 = builder46.get();
        byte[] byteArray53 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AQoK//8K");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder54 = builder46.setEncodeTable(byteArray53);
        byte[] byteArray55 = base64_8.encode(byteArray53);
        byte[] byteArray59 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray61 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray59, false);
        byte[] byteArray62 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray61);
        byte[] byteArray63 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray61);
        byte[] byteArray64 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray61);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray67 = base64_8.encode(byteArray64, (int) 'a', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 97 out of bounds for length 6");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4L + "'", long21 == 4L);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n" + "'", str43, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(base64_51);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[65, 81, 111, 75, 47, 47, 56, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[76, 51, 100, 118, 83, 119]");
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str13 = base64_0.encodeToString(byteArray11);
        boolean boolean14 = base64_0.isStrictDecoding();
        byte[] byteArray16 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("");
        byte[] byteArray19 = base64_0.encode(byteArray16, (int) 'a', (int) (byte) 100);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.randoop.Base64.encodeInteger(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray21);
        byte[] byteArray25 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray21, true, false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DQo" + "'", str12, "DQo");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo=" + "'", str13, "DQo=");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray3 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray3, true, true, (int) '#');
        long long8 = base64_1.getEncodedLength(byteArray3);
        boolean boolean9 = base64_1.isUrlSafe();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_18 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray17);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray22, false);
        boolean boolean26 = base64_18.isInAlphabet(byteArray24, true);
        byte[] byteArray28 = base64_18.decode("/woK");
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray28, true, false);
        boolean boolean32 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray31);
        byte[] byteArray33 = base64_1.decode(byteArray31);
        org.apache.commons.codec.binary.randoop.Base64 base64_35 = new org.apache.commons.codec.binary.randoop.Base64(1, byteArray33, false);
        byte[] byteArray36 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray33);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4L + "'", long8 == 4L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[47, 119, 111, 75, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) 100);
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray11);
        byte[] byteArray13 = base64_0.decode(byteArray11);
        boolean boolean14 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray13);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_13 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray17, false);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray19);
        java.lang.String str21 = base64_13.encodeToString(byteArray20);
        byte[] byteArray22 = base64_8.encode(byteArray20);
        boolean boolean23 = base64_8.isUrlSafe();
        boolean boolean25 = base64_8.isInAlphabet("TDNkdlN3RUtDdi8vQ2c9PQ0K");
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_35 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray34);
        byte[] byteArray39 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray41 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray39, false);
        boolean boolean43 = base64_35.isInAlphabet(byteArray41, true);
        byte[] byteArray45 = base64_35.decode("DQo");
        org.apache.commons.codec.binary.randoop.Base64 base64_46 = new org.apache.commons.codec.binary.randoop.Base64((-1), byteArray45);
        org.apache.commons.codec.binary.randoop.Base64 base64_47 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_48 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray52 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray54 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray52, false);
        byte[] byteArray55 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray54);
        java.lang.String str56 = base64_48.encodeToString(byteArray55);
        java.lang.String str57 = base64_47.encodeAsString(byteArray55);
        byte[] byteArray58 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str59 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray58);
        java.lang.String str60 = base64_47.encodeToString(byteArray58);
        byte[] byteArray63 = base64_46.encode(byteArray58, (int) (short) 100, 0);
        boolean boolean64 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray63);
        byte[] byteArray65 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray63);
        java.lang.String str66 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray65);
        java.lang.String str67 = base64_8.encodeAsString(byteArray65);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/woK" + "'", str21, "/woK");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "/woK" + "'", str56, "/woK");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "/woK" + "'", str57, "/woK");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "DQo" + "'", str59, "DQo");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "DQo=" + "'", str60, "DQo=");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64(false);
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray3);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray3, false, true, (int) (short) -1);
        org.apache.commons.codec.binary.randoop.Base64 base64_10 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) -1, byteArray3, false);
        java.lang.String str11 = base64_1.encodeAsString(byteArray3);
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray3, true, true, (-1));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = base64_0.encodeToString(byteArray7);
        byte[] byteArray10 = base64_0.decode("");
        boolean boolean11 = base64_0.isStrictDecoding();
        org.apache.commons.codec.binary.randoop.Base64 base64_12 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_13 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray17, false);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray19);
        java.lang.String str21 = base64_13.encodeToString(byteArray20);
        java.lang.String str22 = base64_12.encodeAsString(byteArray20);
        byte[] byteArray23 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str24 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray23);
        java.lang.String str25 = base64_12.encodeToString(byteArray23);
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray30 = base64_12.encode(byteArray27, 1, 0);
        byte[] byteArray32 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray27, true);
        byte[] byteArray33 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray32);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray36 = base64_0.encode(byteArray33, 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 8");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/woK" + "'", str21, "/woK");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "/woK" + "'", str22, "/woK");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DQo" + "'", str24, "DQo");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DQo=" + "'", str25, "DQo=");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[68, 81, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[82, 70, 70, 118, 80, 81, 48, 75]");
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        byte[] byteArray1 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("TDNkdlN3\001\n\n\ufffd\ufffd\nPT0NCg==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_2 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray6, false);
        byte[] byteArray9 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray8);
        java.lang.String str10 = base64_2.encodeToString(byteArray9);
        java.lang.String str11 = base64_1.encodeAsString(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray13 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray12);
        byte[] byteArray14 = base64_1.decode(byteArray12);
        org.apache.commons.codec.binary.randoop.Base64 base64_15 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) 100, byteArray12);
        boolean boolean16 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray12);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/woK" + "'", str11, "/woK");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64(true);
        org.apache.commons.codec.binary.randoop.Base64 base64_3 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_4 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray10 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray8, false);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray10);
        java.lang.String str12 = base64_4.encodeToString(byteArray11);
        java.lang.String str13 = base64_3.encodeAsString(byteArray11);
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray16 = base64_3.decode(byteArray14);
        org.apache.commons.codec.binary.randoop.Base64 base64_17 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) 100, byteArray14);
        boolean boolean18 = base64_17.isUrlSafe();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_27 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray26);
        byte[] byteArray29 = base64_17.decode(byteArray26);
        java.lang.String str30 = base64_1.encodeToString(byteArray26);
        boolean boolean31 = base64_1.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/woK" + "'", str12, "/woK");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "/woK" + "'", str13, "/woK");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "AQoK__8K\r\n" + "'", str30, "AQoK__8K\r\n");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        org.apache.commons.codec.binary.randoop.Base64 base64_10 = new org.apache.commons.codec.binary.randoop.Base64(64, byteArray8);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_2 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray6, false);
        byte[] byteArray9 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray8);
        java.lang.String str10 = base64_2.encodeToString(byteArray9);
        java.lang.String str11 = base64_1.encodeAsString(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        byte[] byteArray13 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray12);
        byte[] byteArray14 = base64_1.decode(byteArray12);
        org.apache.commons.codec.binary.randoop.Base64 base64_15 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) 100, byteArray12);
        boolean boolean16 = base64_15.isUrlSafe();
        org.apache.commons.codec.CodecPolicy codecPolicy17 = base64_15.getCodecPolicy();
        boolean boolean18 = base64_15.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/woK" + "'", str11, "/woK");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[68, 81, 111]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy17 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy17.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64(64);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy3 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setDecodingPolicy(codecPolicy3);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder4.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder4.setDecodingPolicy(codecPolicy7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray14);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder16 = builder8.setEncodeTable(byteArray14);
        byte[] byteArray17 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray14);
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray17, false);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64Chunked(byteArray17);
        java.lang.Object obj21 = base64_1.encode((java.lang.Object) byteArray17);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[84, 68, 78, 107, 100, 108, 78, 51]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[84, 68, 78, 107, 100, 108, 78, 51, 13, 10]");
        org.junit.Assert.assertNotNull(obj21);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) -1);
        boolean boolean2 = base64_1.isStrictDecoding();
        org.apache.commons.codec.binary.randoop.Base64 base64_3 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_4 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray10 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray8, false);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray10);
        java.lang.String str12 = base64_4.encodeToString(byteArray11);
        java.lang.String str13 = base64_3.encodeAsString(byteArray11);
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray14);
        java.lang.String str16 = base64_3.encodeToString(byteArray14);
        boolean boolean17 = base64_3.isStrictDecoding();
        boolean boolean18 = base64_3.isStrictDecoding();
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray20, true, true, (int) '#');
        byte[] byteArray25 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray24);
        java.lang.Object obj26 = base64_3.encode((java.lang.Object) byteArray24);
        java.lang.Object obj27 = base64_1.decode((java.lang.Object) byteArray24);
        byte[] byteArray29 = base64_1.decode("RFFvDQo");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "/woK" + "'", str12, "/woK");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "/woK" + "'", str13, "/woK");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DQo" + "'", str15, "DQo");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DQo=" + "'", str16, "DQo=");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[82, 70, 70, 118, 68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[68, 81, 111, 13, 10]");
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray0);
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray0);
        byte[] byteArray3 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray0);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray4, false);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray6);
        java.lang.String str8 = base64_0.encodeToString(byteArray7);
        byte[] byteArray10 = base64_0.decode("");
        boolean boolean12 = base64_0.isInAlphabet("AQoK//8K");
        byte[] byteArray13 = null;
        java.lang.String str14 = base64_0.encodeToString(byteArray13);
        boolean boolean16 = base64_0.isInAlphabet("TDNkdlN3\r\n");
        org.apache.commons.codec.CodecPolicy codecPolicy17 = base64_0.getCodecPolicy();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/woK" + "'", str8, "/woK");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + codecPolicy17 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy17.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray12, false);
        boolean boolean16 = base64_8.isInAlphabet(byteArray14, true);
        byte[] byteArray18 = base64_8.decode("DQo");
        boolean boolean19 = base64_8.isUrlSafe();
        byte[] byteArray21 = base64_8.decode("DQo=");
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_30 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray29);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray36 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray34, false);
        boolean boolean38 = base64_30.isInAlphabet(byteArray36, true);
        byte[] byteArray40 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray36, true);
        java.lang.String str41 = base64_8.encodeToString(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray40);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[13, 10]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0NCg==\001\n\n\ufffd\ufffd\n" + "'", str41, "TDNkdlN3\001\n\n\ufffd\ufffd\nPT0NCg==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[47, 119, 111, 75]");
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray1);
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray1, false, true, (int) (short) -1);
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray1);
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64((int) (short) 1, byteArray7);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray2 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray6 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray2, true, true, (int) '#');
        long long7 = base64_0.getEncodedLength(byteArray2);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_16 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray15);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray22 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray20, false);
        boolean boolean24 = base64_16.isInAlphabet(byteArray22, true);
        byte[] byteArray27 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray22, true, false);
        byte[] byteArray28 = base64_0.encode(byteArray22);
        boolean boolean29 = base64_0.isStrictDecoding();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4L + "'", long7 == 4L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[76, 51, 100, 118, 83, 119, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64((-1));
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_10 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray9);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray16 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray14, false);
        boolean boolean18 = base64_10.isInAlphabet(byteArray16, true);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray21 = base64_10.decode(byteArray20);
        byte[] byteArray22 = base64_1.decode(byteArray21);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 100);
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_10 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray9);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_19 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray18);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray25 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray23, false);
        boolean boolean27 = base64_19.isInAlphabet(byteArray25, true);
        byte[] byteArray30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray25, false, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray25);
        java.lang.String str32 = base64_10.encodeAsString(byteArray25);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_41 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray40);
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray47 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray45, false);
        boolean boolean49 = base64_41.isInAlphabet(byteArray47, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray52 = base64_41.decode(byteArray51);
        java.lang.String str53 = base64_10.encodeAsString(byteArray52);
        java.lang.String str54 = base64_1.encodeAsString(byteArray52);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder55 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy56 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder57 = builder55.setDecodingPolicy(codecPolicy56);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder59 = builder57.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy60 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder61 = builder57.setDecodingPolicy(codecPolicy60);
        byte[] byteArray65 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray67 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray65, false);
        byte[] byteArray68 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray67);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder69 = builder61.setEncodeTable(byteArray67);
        byte[] byteArray70 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafe(byteArray67);
        byte[] byteArray72 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray70, false);
        boolean boolean73 = org.apache.commons.codec.binary.randoop.Base64.isArrayByteBase64(byteArray70);
        byte[] byteArray74 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray70);
        boolean boolean76 = base64_1.isInAlphabet(byteArray70, false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "L3dvSw==\001\n\n\ufffd\ufffd\n" + "'", str32, "L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[84, 68, 78, 107, 100, 108, 78, 51]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_8 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray7);
        byte[] byteArray9 = null;
        byte[] byteArray12 = base64_8.encode(byteArray9, 100, 76);
        org.apache.commons.codec.binary.randoop.Base64 base64_13 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray19 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray17, false);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray19);
        java.lang.String str21 = base64_13.encodeToString(byteArray20);
        byte[] byteArray22 = base64_8.encode(byteArray20);
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray26, false);
        byte[] byteArray29 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray28);
        java.lang.String str30 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray28);
        byte[] byteArray31 = base64_8.decode(byteArray28);
        byte[] byteArray34 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray31, true, false);
        java.lang.String str35 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray34);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/woK" + "'", str21, "/woK");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 119, 111, 75, 1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "L3dvSw" + "'", str30, "L3dvSw");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[47, 119, 111, 75, 13, 10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "L3dvSw0K" + "'", str35, "L3dvSw0K");
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        byte[] byteArray1 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("TDNkdlN3PT0");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[76, 51, 100, 118, 83, 119, 61, 61]");
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        org.apache.commons.codec.binary.randoop.Base64 base64_0 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray5, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray7);
        java.lang.String str9 = base64_1.encodeToString(byteArray8);
        java.lang.String str10 = base64_0.encodeAsString(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str12 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str13 = base64_0.encodeToString(byteArray11);
        byte[] byteArray14 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray14);
        java.lang.Object obj17 = base64_0.encode((java.lang.Object) byteArray14);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_26 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray25);
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray32 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray30, false);
        boolean boolean34 = base64_26.isInAlphabet(byteArray32, true);
        byte[] byteArray36 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        byte[] byteArray37 = base64_26.decode(byteArray36);
        org.apache.commons.codec.binary.randoop.Base64 base64_38 = new org.apache.commons.codec.binary.randoop.Base64();
        org.apache.commons.codec.binary.randoop.Base64 base64_39 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray45 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray43, false);
        byte[] byteArray46 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray45);
        java.lang.String str47 = base64_39.encodeToString(byteArray46);
        java.lang.String str48 = base64_38.encodeAsString(byteArray46);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_57 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray56);
        byte[] byteArray61 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray63 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray61, false);
        boolean boolean65 = base64_57.isInAlphabet(byteArray63, true);
        byte[] byteArray68 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray63, false, true);
        byte[] byteArray69 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64(byteArray63);
        byte[] byteArray72 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray63, true, false);
        java.math.BigInteger bigInteger73 = org.apache.commons.codec.binary.randoop.Base64.decodeInteger(byteArray72);
        byte[] byteArray74 = base64_38.encode(byteArray72);
        java.lang.Object obj75 = base64_26.encode((java.lang.Object) byteArray74);
        java.lang.Object obj76 = base64_0.encode(obj75);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/woK" + "'", str9, "/woK");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/woK" + "'", str10, "/woK");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DQo" + "'", str12, "DQo");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DQo=" + "'", str13, "DQo=");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DQo" + "'", str15, "DQo");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[47, 119, 111, 75]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 10, 10]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "/woK" + "'", str47, "/woK");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "/woK" + "'", str48, "/woK");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[76, 51, 100, 118, 83, 119]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[76, 51, 100, 118, 83, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[84, 68, 78, 107, 100, 108, 78, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertNotNull(obj76);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray19 = base64_9.decode("DQo");
        org.apache.commons.codec.binary.randoop.Base64 base64_20 = new org.apache.commons.codec.binary.randoop.Base64((-1), byteArray19);
        boolean boolean21 = base64_20.isUrlSafe();
        org.apache.commons.codec.binary.randoop.Base64 base64_22 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray28 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray24, true, true, (int) '#');
        long long29 = base64_22.getEncodedLength(byteArray24);
        boolean boolean30 = base64_22.isUrlSafe();
        byte[] byteArray32 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray36 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray32, true, true, (int) '#');
        byte[] byteArray37 = base64_22.encode(byteArray36);
        java.lang.String str38 = base64_20.encodeToString(byteArray37);
        byte[] byteArray41 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray37, false, true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[13, 10]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 4L + "'", long29 == 4L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[82, 70, 70, 118, 68, 81, 111, 61]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UkZGdkRRbz0=" + "'", str38, "UkZGdkRRbz0=");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[85, 107, 90, 71, 100, 107, 82, 82, 98, 122, 48]");
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64String(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray6);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AAoKCgoB" + "'", str7, "AAoKCgoB");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[65, 65, 111, 75, 67, 103, 111, 66]");
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64((-1));
        boolean boolean3 = base64_1.isInAlphabet("TDNkdlN3\001\n\n\ufffd\ufffd\nPT0=\001\n\n\ufffd\ufffd\n");
        byte[] byteArray5 = base64_1.decode("L3dvSw==\001\n\n\ufffd\ufffd\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[47, 119, 111, 75]");
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder6.setUrlSafe(false);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder8.setUrlSafe(true);
        org.apache.commons.codec.binary.randoop.Base64 base64_12 = new org.apache.commons.codec.binary.randoop.Base64((int) (byte) 100);
        byte[] byteArray13 = org.apache.commons.codec.binary.randoop.BaseNCodec.getChunkSeparator();
        java.lang.String str14 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64URLSafeString(byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray13);
        byte[] byteArray16 = base64_12.encode(byteArray15);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder17 = builder8.setLineSeparator(byteArray15);
        org.apache.commons.codec.CodecPolicy codecPolicy18 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder19 = builder8.setDecodingPolicy(codecPolicy18);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[13, 10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DQo" + "'", str14, "DQo");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[68, 81, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[82, 70, 70, 118, 80, 81, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder0 = org.apache.commons.codec.binary.randoop.Base64.builder();
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder2 = builder0.setDecodingPolicy(codecPolicy1);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder4 = builder2.setUrlSafe(false);
        org.apache.commons.codec.CodecPolicy codecPolicy5 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder6 = builder2.setDecodingPolicy(codecPolicy5);
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.binary.randoop.Base64.Builder builder8 = builder2.setDecodingPolicy(codecPolicy7);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder10 = builder8.setUrlSafe(false);
        byte[] byteArray12 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("AAoKCgoB");
        org.apache.commons.codec.binary.randoop.Base64.Builder builder13 = builder10.setLineSeparator(byteArray12);
        org.apache.commons.codec.binary.randoop.Base64.Builder builder15 = builder13.setLineLength((int) '#');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 10, 10, 10, 10, 1]");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_9 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray15 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray13, false);
        boolean boolean17 = base64_9.isInAlphabet(byteArray15, true);
        byte[] byteArray20 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray15, false, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.randoop.Base64 base64_22 = new org.apache.commons.codec.binary.randoop.Base64((int) '#', byteArray15, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [/woK]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[76, 51, 100, 118, 83, 119]");
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        org.apache.commons.codec.binary.randoop.Base64 base64_1 = new org.apache.commons.codec.binary.randoop.Base64();
        byte[] byteArray3 = org.apache.commons.codec.binary.randoop.Base64.decodeBase64("DQo");
        byte[] byteArray7 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray3, true, true, (int) '#');
        long long8 = base64_1.getEncodedLength(byteArray3);
        boolean boolean9 = base64_1.isUrlSafe();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) -1, (byte) 10 };
        org.apache.commons.codec.binary.randoop.Base64 base64_18 = new org.apache.commons.codec.binary.randoop.Base64(10, byteArray17);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        byte[] byteArray24 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray22, false);
        boolean boolean26 = base64_18.isInAlphabet(byteArray24, true);
        byte[] byteArray28 = base64_18.decode("/woK");
        byte[] byteArray31 = org.apache.commons.codec.binary.randoop.Base64.encodeBase64(byteArray28, true, false);
        boolean boolean32 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray31);
        byte[] byteArray33 = base64_1.decode(byteArray31);
        org.apache.commons.codec.binary.randoop.Base64 base64_35 = new org.apache.commons.codec.binary.randoop.Base64(1, byteArray33, false);
        boolean boolean36 = org.apache.commons.codec.binary.randoop.Base64.isBase64(byteArray33);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[68, 81, 111, 13, 10]");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4L + "'", long8 == 4L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 10, 10, -1, -1, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[47, 119, 111, 75]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[47, 119, 111, 75, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }
}
